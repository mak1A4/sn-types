[
  {
    "children": [
      {
        "children": [
          {
            "children": null,
            "dc_identifier": null,
            "name": "Example",
            "order": 10,
            "release": "paris",
            "sectionHeader": null,
            "sectionTitle": null,
            "tableHeader": null,
            "text": "<code>var stockAPI = new sn_ws.RESTMessageV2('Stock Details', 'Default GET'); \nvar response = stockAPI.execute(); \nvar responseBody = response.getBody(); \n\nvar transformerRuleList = new sn_tfrm.TransformerRuleList()\n  .fromJSON()\n  .addRule('ticker', 'quote.symbol') \n  .addRule('change_percentage', 'quote.change') \n  .thenMultiply('100') \n  .thenRoundDown('0') \n  .addRule('close_price', 'quote.close') \n  .thenAdaptCurrency('USD', false) \n  .addRule('summary') \n  .thenConcat('Shares of ') \n  .thenConcatSymbol('ticker') \n  .thenConcat(' closed at ') \n  .thenConcatSymbol('close') \n\n \nvar path = '$.*'; \nvar transformerDefinition = new sn_tfrm.TransformerDefinition(transformerRuleList, path); \nvar transformer = new sn_tfrm.Transformer(transformerDefinition, responseBody); \n\nvar results = []; \nwhile (transformer.transform()) { \n  results.push(transformer.getRow());\n}</code>",
            "text2": null,
            "type": "Example",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "transformerDefinition",
            "order": 10,
            "release": "paris",
            "sectionHeader": "Parameters",
            "sectionTitle": null,
            "tableHeader": "Name,Type,Description",
            "text": "Object",
            "text2": "Object that describes the content transformation; includes rule list and\n                JSONPath/XPath record path. <p class=\"p\">Use the <span class=\"keyword apiname\">TransformerRuleList()</span> and\n                    <span class=\"keyword apiname\">TransformerDefinition()</span> APIs to generate this\n                object.</p>",
            "type": "Parameter",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "document",
            "order": 20,
            "release": "paris",
            "sectionHeader": "Parameters",
            "sectionTitle": null,
            "tableHeader": "Name,Type,Description",
            "text": "String",
            "text2": "Source document to translate.",
            "type": "Parameter",
            "variable": null
          }
        ],
        "dc_identifier": "Transformer-Transformer_O_S",
        "hasExample": true,
        "hasParameter": true,
        "name": "Transformer(Object transformerDefinition, String document)",
        "order": 2520,
        "parentId": "TransformerScriptedAPI",
        "parent_permalink": "class_namespace__scoped_transformer___scoped__global_sn_tfrm__paris",
        "release": "paris",
        "sectionHeader": null,
        "sectionTitle": null,
        "tableHeader": null,
        "text": "Instantiates a Transformer object (constructor).",
        "text2": null,
        "type": "Constructor",
        "variable": null
      },
      {
        "children": [
          {
            "children": [
              {
                "children": null,
                "dc_identifier": null,
                "name": "Output",
                "order": 10,
                "release": "paris",
                "sectionHeader": null,
                "sectionTitle": null,
                "tableHeader": null,
                "text": "{ticker: &quot;Now&quot;, change_percentage: &quot;0&quot;, close_price: &quot;165.77 USD&quot;, summary: &quot;Shares of Now closed at 165.77&quot; }",
                "text2": null,
                "type": "Output",
                "variable": null
              }
            ],
            "dc_identifier": null,
            "name": "Example",
            "order": 10,
            "release": "paris",
            "sectionHeader": null,
            "sectionTitle": null,
            "tableHeader": null,
            "text": "<code>var results = []; \nwhile (transformer.transform()) { \n  results.push(transformer.getRow());\n</code>",
            "text2": null,
            "type": "Example",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "Object",
            "order": 10,
            "release": "paris",
            "sectionHeader": "Returns",
            "sectionTitle": null,
            "tableHeader": "Type,Description",
            "text": "Object containing one transformed\n                row/node\n                of data.",
            "text2": null,
            "type": "Return",
            "variable": null
          }
        ],
        "dc_identifier": "Trans-getRow",
        "hasExample": true,
        "hasOutput": true,
        "hasReturn": true,
        "name": "getRow()",
        "order": 9170,
        "parentId": "TransformerScriptedAPI",
        "parent_permalink": "class_namespace__scoped_transformer___scoped__global_sn_tfrm__paris",
        "release": "paris",
        "sectionHeader": null,
        "sectionTitle": null,
        "tableHeader": null,
        "text": "Returns\n    the row resulting from the last transformation (or null if no row\n    exists).",
        "text2": null,
        "type": "Method",
        "variable": null
      },
      {
        "children": [
          {
            "children": [
              {
                "children": null,
                "dc_identifier": null,
                "name": "Output",
                "order": 10,
                "release": "paris",
                "sectionHeader": null,
                "sectionTitle": null,
                "tableHeader": null,
                "text": "{ticker: &quot;Now&quot;, change_percentage: &quot;0&quot;, close_price: &quot;165.77 USD&quot;, summary: &quot;Shares of Now closed at 165.77&quot; }",
                "text2": null,
                "type": "Output",
                "variable": null
              }
            ],
            "dc_identifier": null,
            "name": "Example",
            "order": 10,
            "release": "paris",
            "sectionHeader": null,
            "sectionTitle": null,
            "tableHeader": null,
            "text": "<code>var results = []; \nwhile (transformer.transform()) { \n  results.push(transformer.getRow());\n</code>",
            "text2": null,
            "type": "Example",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "Boolean",
            "order": 10,
            "release": "paris",
            "sectionHeader": "Returns",
            "sectionTitle": null,
            "tableHeader": "Type,Description",
            "text": "Flag that indicates whether there is a valid next row to transform.<ul class=\"ul\" id=\"Trans-transform__ul_zcn_2qh_phb\">\n                  <li class=\"li\">true: Valid next row</li>\n\n                  <li class=\"li\">false: No additional rows</li>\n\n                </ul>",
            "text2": null,
            "type": "Return",
            "variable": null
          }
        ],
        "dc_identifier": "Trans-transform",
        "hasExample": true,
        "hasOutput": true,
        "hasReturn": true,
        "name": "transform()",
        "order": 15300,
        "parentId": "TransformerScriptedAPI",
        "parent_permalink": "class_namespace__scoped_transformer___scoped__global_sn_tfrm__paris",
        "release": "paris",
        "sectionHeader": null,
        "sectionTitle": null,
        "tableHeader": null,
        "text": "Transforms the next available\n    row/node\n    in the source document.",
        "text2": null,
        "type": "Method",
        "variable": null
      }
    ],
    "dc_identifier": "TransformerScriptedAPI",
    "is_current": true,
    "is_highlighted": true,
    "level": "Class",
    "name": "Transformer - Scoped, Global",
    "namespace_id": "sn_tfrm-namespace",
    "release": "paris",
    "text": "Parses and transforms structured JSON or XML source content into structured key/value\n    pair output, using a defined set of rules.",
    "text2": "The scripted <span class=\"keyword apiname\">Transformer</span> API works along with the\n        <span class=\"keyword apiname\">TransformerDefinition</span> and <span class=\"keyword apiname\">TransformerRuleList</span> APIs.\n      Together, these APIs transform XML nodes or any entity in a structured JSON document into an\n      output of name-value pairs. Supported JSON entities including objects and elements within an\n      array, such as strings, numbers, and other arrays.<br/><br/><ul class=\"ul\" id=\"TransformerScriptedAPI__ul_nsk_xfv_bkb\">\n        <li class=\"li\">\n          <p class=\"p\">The\n                  <span class=\"keyword apiname\">TransformerRuleList</span> API enables you to create transformation\n                rule lists that define what data in the source document to include in the output and\n                how to transform the source data.</p>\n\n        </li>\n\n        <li class=\"li\">\n          <p class=\"p\">The\n                  <span class=\"keyword apiname\">TransformerDefinition</span> API associates a transformation rule list\n                with a JSON/XML record path to define reusable transform definition objects. You can\n                use a transform definition object to transform one or more source documents.</p>\n\n        </li>\n\n        <li class=\"li\">\n          <p class=\"p\">The <span class=\"keyword apiname\">Transformer</span> API performs\n                the actual data transformation, one data entity at a time, using the specified\n                transformation rule list to create the desired output data.</p>\n\n        </li>\n\n      </ul><br/><br/>You can use the <span class=\"keyword apiname\">Transformer</span> class in both scoped and global server\n      scripts. When using this class, use the <span class=\"keyword parmname\">sn_tfrm</span> namespace identifier.\n      Before this API is available in an instance, you must activate the Transformation Service\n      plugin (com.glide.transform).<br/><br/>The following example illustrates how to use the <span class=\"keyword apiname\">TransformerRuleList</span> API\n      to define the transformation rules, the <span class=\"keyword apiname\">TransformerDefinition</span> API to define\n      the transformation criteria, and the <span class=\"keyword apiname\">Transformer</span> API to actually perform\n      the transformation.<br/><br/>This code example retrieves an external JSON-based stock details document, creates rules for\n      transforming that data into a tabular table, and then transforms the source document, one row\n      at a time. The following is a snippet of the JSON source document being transformed:<br/><br/><pre><code class='language-javascript'><code>{\n  \"NOW\": {\n    \"quote\": {\n      \"symbol\": \"NOW\",\n      \"companyName\": \"ServiceNow Inc.\",\n      \"primaryExchange\": \"New York Stock Exchange\",\n      \"sector\": \"Technology\",\n      \"open\": 166.78,\n      \"openTime\": 1522935000556,\n      \"close\": 165.77,\n      \"changePercent\": 0.00656,\n       ...\n     },\n ...}</code></code></pre><br/><br/><pre><code class='language-javascript'><code>var stockAPI = new sn_ws.RESTMessageV2('Stock Details', 'Default GET'); \nvar response = stockAPI.execute(); \nvar responseBody = response.getBody(); // obtain the source JSON document\n\n/* Define the list of rules to use to transform the acquired JSON stock detail \ninformation into a tabular table */\n\nvar transformerRuleList = new sn_tfrm.TransformerRuleList() // instantiate the rule list object\n  .fromJSON() // indicate that the source document is JSON\n  .addRule('ticker', '$.quote.symbol') // add a rule to copy the value in the \"symbol\" field of the source document to the ticker field in the output document (no changes)\n  .addRule('change_percentage', '$.quote.changePercent') // copy the \"changePercent\" field from source into the change_percentage field of output document\n  .thenMultiply('100') // multiply the change_percentage value by 100\n  .thenRoundDown('0') // addthen round it down to a whole number \n  .addRule('close_price', '$.quote.close') // copy the \"close\" field to the close_price field in the 21=-[';output\n  .thenAdaptCurrency('USD', false) // attach the US dollar code to the close_price field, but do not display the symbol\n  .addRule('summary') // add a blank \"summary\" field to the output (no corresponding source field)\n  .thenConcat('Shares of ') // in the summary field concatenate the string \"Shares of \"\n  .thenConcatSymbol('ticker') // then concatenate the \"ticker\" field from the source document\n  .thenConcat(' closed at ') // then concatenate the string \" closed at \"\n  .thenConcatSymbol('close_price'); // then concatenate the \"close_price\" field from the source document\n\n// Create a transformer definition that associates the rule list to use and the record path of the set of records in the source document to transform.  \nvar path = '$.*'; \nvar transformerDefinition = new sn_tfrm.TransformerDefinition(transformerRuleList, path);\n \n// Instantiate the transformer object.\nvar transformer = new sn_tfrm.Transformer(transformerDefinition, responseBody); \n\n// Transform the source data, one row at a time, until all rows are processed.\nvar results = []; \nwhile (transformer.transform()) { \n  results.push(transformer.getRow());\n} </code></code></pre>\n      <p class=\"p\">Output:</p>\n\n      <pre><code class='language-javascript'><code> {ticker: \"Now\", change_percentage: \"0\", close_price: \"165.77 USD\", summary: \"Shares of Now closed at 165.77\" }</code></code></pre>",
    "type": "Server Side Scoped",
    "variable": ""
  },
  {
    "children": [
      {
        "children": [
          {
            "children": null,
            "dc_identifier": null,
            "name": "transformerRuleList",
            "order": 10,
            "release": "paris",
            "sectionHeader": "Parameters",
            "sectionTitle": null,
            "tableHeader": "Name,Type,Description",
            "text": "Object",
            "text2": "TransformerRuleList to associate with this transformer definition.",
            "type": "Parameter",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "Example",
            "order": 10,
            "release": "paris",
            "sectionHeader": null,
            "sectionTitle": null,
            "tableHeader": null,
            "text": "<code>var stockAPI = new sn_ws.RESTMessageV2('Stock Details', 'Default GET'); \nvar response = stockAPI.execute(); \nvar responseBody = response.getBody(); \n\nvar transformerRuleList = new sn_tfrm.TransformerRuleList()\n  .fromJSON()\n  .addSymbol('ticker', 'quote.symbol') \n  .addSymbol('change_percentage', 'quote.change_change') \n  .thenMultiply('100') \n  .thenRoundDown('0') \n  .addSymbol('close_price', 'quote.close') \n  .thenAdaptCurrency('USD', false) \n  .addSymbol('summary') \n  .thenConcat('Shares of ') \n  .thenConcatSymbol('ticker') \n  .thenConcat(' closed at ') \n  .thenConcatSymbol('close'); \n\n \nvar path = '$.*'; // Transform all objects in the JSON document\nvar transformerDefinition = new sn_tfrm.TransformerDefinition(transformerRuleList, recordPath); \nvar transformer = new sn_tfrm.Transformer(transformerDefinition, responseBody); \n\nvar results = []; \nwhile (transformer.transform()) { \n  results.push(transformer.getRow());\n}</code>",
            "text2": null,
            "type": "Example",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "recordPath",
            "order": 20,
            "release": "paris",
            "sectionHeader": "Parameters",
            "sectionTitle": null,
            "tableHeader": "Name,Type,Description",
            "text": "String",
            "text2": "<p class=\"p\">Optional. The path (JSONPath for JSON, XPath for XML) that identifies the\n                  container (parent) of nodes to parse as records in the source document.</p>\n\n                <p class=\"p\">For JSON documents, these nodes can be any object, array, or JSON primitive\n                  (string, number, boolean). For XML documents, these nodes are the child elements\n                  of the container.</p>\n\n                <p class=\"p\">If <span class=\"keyword parmname\">recordPath</span> is unspecified, the entire document is\n                  inferred as a single record. For JSON documents, if the top node is an array and\n                    <span class=\"keyword parmname\">recordPath</span> is unspecified, then the top array is the\n                  record's container, and each of its entries is a record.</p>",
            "type": "Parameter",
            "variable": null
          }
        ],
        "dc_identifier": "TRD-transformerDefinition_O_S",
        "hasExample": true,
        "hasParameter": true,
        "name": "transformerDefinition(Object transformerRuleList, String recordPath)",
        "order": 2530,
        "parentId": "TransformerDefinitionAPI",
        "parent_permalink": "class_namespace__scoped_transformerdefinition___scoped__global_sn_tfrm__paris",
        "release": "paris",
        "sectionHeader": null,
        "sectionTitle": null,
        "tableHeader": null,
        "text": "Instantiates a TransformerDefinition object.",
        "text2": null,
        "type": "Constructor",
        "variable": null
      },
      {
        "children": [
          {
            "children": null,
            "dc_identifier": null,
            "name": "String",
            "order": 10,
            "release": "paris",
            "sectionHeader": "Returns",
            "sectionTitle": null,
            "tableHeader": "Type,Description",
            "text": "If set, the record path associated with the transformer definition. If not set,\n                returns null.",
            "text2": null,
            "type": "Return",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "Example",
            "order": 10,
            "release": "paris",
            "sectionHeader": null,
            "sectionTitle": null,
            "tableHeader": null,
            "text": "<code>var path = '$.records'; \nvar transformerDefinition = new sn_tfrm.TransformerDefinition(transformerRuleList, recordPath); \nvar transformer = new sn_tfrm.Transformer(transformerDefinition, responseBody);  \n.\n.\n.\n\nvar recordPath = transformerDefinition.recordfPath();\n\nvar results = []; \nwhile (transformer.transform()) { \n  results.push(transformer.getRow());\n}</code>",
            "text2": null,
            "type": "Example",
            "variable": null
          }
        ],
        "dc_identifier": "TRD-recordPath",
        "hasExample": true,
        "hasReturn": true,
        "name": "recordPath()",
        "order": 12230,
        "parentId": "TransformerDefinitionAPI",
        "parent_permalink": "class_namespace__scoped_transformerdefinition___scoped__global_sn_tfrm__paris",
        "release": "paris",
        "sectionHeader": null,
        "sectionTitle": null,
        "tableHeader": null,
        "text": "If set when the TransformerDefinition object was instantiated, returns the record path\n    for the source data file associated with the TransformerDefinition object.",
        "text2": "<p>A record path (JSONPath for JSON, XPath for XML) identifies the container\n              (parent) of nodes to parse as records in the source document.</p><p>For JSON\n                documents, these nodes can be any object, array, or JSON primitive (string, number,\n                boolean). For XML documents, these nodes are the child elements of the\n                container.</p><p>If <span class=\"keyword parmname\">recordPath</span> is unspecified, the entire\n                document is inferred as a single record. For JSON documents, if the top node is an\n                array and <span class=\"keyword parmname\">recordPath</span> is unspecified, then the top array is the\n                record's container, and each of its entries is a record.</p>",
        "type": "Method",
        "variable": null
      },
      {
        "children": [
          {
            "children": null,
            "dc_identifier": null,
            "name": "Example",
            "order": 10,
            "release": "paris",
            "sectionHeader": null,
            "sectionTitle": null,
            "tableHeader": null,
            "text": "<code>var transformerDefinition = new sn_tfrm.TransformerDefinition(transformerRuleList, recordPath);\nvar transformer = new sn_tfrm.Transformer(transformerDefinition, responseBody); \n.\n.\n.\n\nif (transformerDefinition.validate()) {\n\n  var results = []; \n  while (transformer.transform()) { \n    results.push(transformer.getRow());\n  }\n}</code>",
            "text2": null,
            "type": "Example",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "Boolean",
            "order": 10,
            "release": "paris",
            "sectionHeader": "Returns",
            "sectionTitle": null,
            "tableHeader": "Type,Description",
            "text": "Flag that indicates whether a valid TransformerRuleList is associated with the\n                specified TransformerDefintion object.<p class=\"p\">Valid values:</p>\n<ul class=\"ul\" id=\"TRD-validate__ul_d4k_wgy_qhb\">\n                  <li class=\"li\">true: Valid TransformerRuleList associated</li>\n\n                  <li class=\"li\">false: Invalid or no TransformerRulList associated</li>\n\n                </ul>",
            "text2": null,
            "type": "Return",
            "variable": null
          }
        ],
        "dc_identifier": "TRD-validate",
        "hasExample": true,
        "hasReturn": true,
        "name": "validate()",
        "order": 15470,
        "parentId": "TransformerDefinitionAPI",
        "parent_permalink": "class_namespace__scoped_transformerdefinition___scoped__global_sn_tfrm__paris",
        "release": "paris",
        "sectionHeader": null,
        "sectionTitle": null,
        "tableHeader": null,
        "text": "Validates whether a valid TransformerRuleList is associated with the\n    TransformerDefintion object.",
        "text2": null,
        "type": "Method",
        "variable": null
      }
    ],
    "dc_identifier": "TransformerDefinitionAPI",
    "is_current": true,
    "is_highlighted": true,
    "level": "Class",
    "name": "TransformerDefinition - Scoped, Global",
    "namespace_id": "sn_tfrm-namespace",
    "release": "paris",
    "text": "Provides methods to instantiate and manage the TransformerDefinition object, which\n    associates a transformation rules list and a record path.",
    "text2": "The <span class=\"keyword apiname\">TransformerDefinition</span> API works along with the\n        <span class=\"keyword apiname\">Transformer</span> and <span class=\"keyword apiname\">TransformerRuleList</span> APIs. <span class=\"ph\">Together, these APIs transform XML nodes or\n                any entity in a structured JSON document into an output of name-value pairs.\n                Supported JSON entities including objects and elements within an array, such as\n                strings, numbers, and other arrays.</span><br/><br/><ul class=\"ul\" id=\"TransformerDefinitionAPI__ul_otj_sgv_bkb\">\n        <li class=\"li\">\n          <p class=\"p\">The\n                  <span class=\"keyword apiname\">TransformerRuleList</span> API enables you to create transformation\n                rule lists that define what data in the source document to include in the output and\n                how to transform the source data.</p>\n\n        </li>\n\n        <li class=\"li\">\n          <p class=\"p\">The\n                  <span class=\"keyword apiname\">TransformerDefinition</span> API associates a transformation rule list\n                with a JSON/XML record path to define reusable transform definition objects. You can\n                use a transform definition object to transform one or more source documents.</p>\n\n        </li>\n\n      </ul><br/><br/>In addition, this object provides methods that enable you to obtain the record path of the\n      TransformerDefinition object. It can also validate whether the definition has a valid\n      TransformerRuleList associated with it.<br/><br/>The <span class=\"keyword apiname\">Transformer</span> API performs\n                the actual data transformation, one data entity at a time, using the specified\n                transformation rule list to create the desired output data.<br/><br/>You can use the <span class=\"keyword apiname\">TransformerDefinition</span> class in both scoped and global\n      server scripts. When using this class, use the <span class=\"keyword parmname\">sn_tfrm</span> namespace\n      identifier. Also, before this API is available in an instance, you must activate the\n      Transformation Service plugin (com.glide.transform).",
    "type": "Server Side Scoped",
    "variable": ""
  },
  {
    "children": [
      {
        "children": [
          {
            "children": null,
            "dc_identifier": null,
            "name": "rule",
            "order": 10,
            "release": "paris",
            "sectionHeader": "Parameters",
            "sectionTitle": null,
            "tableHeader": "Name,Type,Description",
            "text": "String",
            "text2": "Name of the element in the destination output.",
            "type": "Parameter",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "Example",
            "order": 10,
            "release": "paris",
            "sectionHeader": null,
            "sectionTitle": null,
            "tableHeader": null,
            "text": "<code>var transformerRuleList = new sn_tfrm.TransformerRuleList()\n  .fromJSON()\n  .setName('Stock Report 05022019 JSON')\n  .addRule('ticker', '$.quote.symbol') \n  .addRule('change_percentage', '$.quote.changePercent') \n  .thenMultiply('100') \n  .thenRoundDown('0') \n  .addRule('close_price', '$.quote.close') \n  .thenAdaptCurrency('USD', false) \n  .addRule('summary') \n  .thenConcat('Shares of ') \n  .thenConcatSymbol('ticker') \n  .thenConcat(' closed at ') \n  .thenConcatSymbol('close_price'); \n</code>",
            "text2": null,
            "type": "Example",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "Object",
            "order": 10,
            "release": "paris",
            "sectionHeader": "Returns",
            "sectionTitle": null,
            "tableHeader": "Type,Description",
            "text": "Current TransformerRuleList object.",
            "text2": null,
            "type": "Return",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "path",
            "order": 20,
            "release": "paris",
            "sectionHeader": "Parameters",
            "sectionTitle": null,
            "tableHeader": "Name,Type,Description",
            "text": "String",
            "text2": "Optional. JSONPath or XPath to the data element in the source document.<p class=\"p\">The\n                  adapter methods <span class=\"keyword apiname\">thenConcat()</span> and\n                    <span class=\"keyword apiname\">thenConcatSymbol()</span> do not require you to define this\n                  parameter if no other adapter methods are defined for the rule. All other adapter\n                  methods require this parameter.</p>",
            "type": "Parameter",
            "variable": null
          }
        ],
        "dc_identifier": "TRL-addRule_S_S",
        "hasExample": true,
        "hasParameter": true,
        "hasReturn": true,
        "name": "addRule(String rule, String path)",
        "order": 3220,
        "parentId": "TransformerRuleListAPI",
        "parent_permalink": "class_namespace__scoped_transformerrulelist___scoped__global_sn_tfrm__paris",
        "release": "paris",
        "sectionHeader": null,
        "sectionTitle": null,
        "tableHeader": null,
        "text": "Creates an entry in the associated transformation rules list which defines a field to\n    create in the output.",
        "text2": "<p>You can create rules for any element in a source document. For example,\n          <code class=\"ph codeph\">.addRule('ticker', '$.quote.symbol')</code> creates the field \"ticker\" in the\n        output and copies over the value in quote.symbol of the source.</p><p>Once you define a rule using <span class=\"keyword apiname\">addRule()</span>, you then use adaptor methods,\n        such as <span class=\"keyword apiname\">thenAdd()</span>, <span class=\"keyword apiname\">thenReplace()</span>, and\n          <span class=\"keyword apiname\">thenFloor()</span> to manipulate the rule's output data. You can define as\n        many adaptor methods as needed for a single rule. All adapter methods directly after an\n          <span class=\"keyword apiname\">addRule()</span> call, until the next <span class=\"keyword apiname\">addRule()</span> call, apply\n        to that rule. Adapter methods are cumulative with the result of all adapter methods being\n        the final value saved in the output field.</p><p>For example, in the following code snippet, <span class=\"keyword apiname\">thenMultiply()</span> and\n          <span class=\"keyword apiname\">thenRoundDown()</span> apply to <span class=\"keyword apiname\">addRule('change_percentage',\n          '$.quote.changePercent')</span>; <span class=\"keyword apiname\">addRule('close_price',\n          '$.quote.close')</span> starts a new rule. If the value in\n          <span class=\"keyword parmname\">$.quote.changePercent</span> is .011, then the final output value is \"1\" (\n        .011 * 100 rounded down to the ones position).</p><p><pre class=\"pre codeblock\"><code>\n  .addRule('change_percentage', '$.quote.changePercent') \n  .thenMultiply('100') \n  .thenRoundDown('0') \n  .addRule('close_price', '$.quote.close') </code></pre></p><p>The <span class=\"keyword apiname\">addRule()</span> method also supports the parameter\n          <span class=\"keyword parmname\">summary</span>; <code class=\"ph codeph\">.addRule('summary')</code>. This implementation\n        creates the name field \"summary:\" in the output, but does not correlate it to any field in\n        the source. You can then use the adaptor methods <span class=\"keyword apiname\">thenConcat()</span> and\n          <span class=\"keyword apiname\">thenConcatSymbol()</span> to modify the contents of the summary field.</p>",
        "type": "Method",
        "variable": null
      },
      {
        "children": [
          {
            "children": null,
            "dc_identifier": null,
            "name": "Example",
            "order": 10,
            "release": "paris",
            "sectionHeader": null,
            "sectionTitle": null,
            "tableHeader": null,
            "text": "<code>var transformerRuleList = new sn_tfrm.TransformerRuleList()\n  .fromJSON()\n  .setName('Stock Report 05022019 JSON')\n  .addRule('ticker', '$.quote.symbol') \n  .addRule('change_percentage', '$.quote.changePercent') \n  .thenMultiply('100') \n  .thenRoundDown('0') \n  .addRule('close_price', '$.quote.close') \n  .thenAdaptCurrency('USD', false) \n  .addRule('summary') \n  .thenConcat('Shares of ') \n  .thenConcatSymbol('ticker') \n  .thenConcat(' closed at ') \n  .thenConcatSymbol('close_price'); \n</code>",
            "text2": null,
            "type": "Example",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "Object",
            "order": 10,
            "release": "paris",
            "sectionHeader": "Returns",
            "sectionTitle": null,
            "tableHeader": "Type,Description",
            "text": "Current TransformerRuleList object.",
            "text2": null,
            "type": "Return",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "name",
            "order": 10,
            "release": "paris",
            "sectionHeader": "Parameters",
            "sectionTitle": null,
            "tableHeader": "Name,Type,Description",
            "text": "String",
            "text2": "Name to use to identify the associated TransformerRuleList object. <p class=\"p\">Although\n                  the API does not force this name to be unique, it is helpful if they are unique\n                  within an instance.</p>",
            "type": "Parameter",
            "variable": null
          }
        ],
        "dc_identifier": "TRL-setName_S",
        "hasExample": true,
        "hasParameter": true,
        "hasReturn": true,
        "name": "setName(String name)",
        "order": 13710,
        "parentId": "TransformerRuleListAPI",
        "parent_permalink": "class_namespace__scoped_transformerrulelist___scoped__global_sn_tfrm__paris",
        "release": "paris",
        "sectionHeader": null,
        "sectionTitle": null,
        "tableHeader": null,
        "text": "Defines a name for the associated TransformerRuleList object for logging\n    purposes.",
        "text2": null,
        "type": "Method",
        "variable": null
      },
      {
        "children": [
          {
            "children": null,
            "dc_identifier": null,
            "name": "currencyCode",
            "order": 10,
            "release": "paris",
            "sectionHeader": "Parameters",
            "sectionTitle": null,
            "tableHeader": "Name,Type,Description",
            "text": "String",
            "text2": "Currency code to tie to the destination data element, such as USD, EUR, and\n                GBP.",
            "type": "Parameter",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "Example",
            "order": 10,
            "release": "paris",
            "sectionHeader": null,
            "sectionTitle": null,
            "tableHeader": null,
            "text": "<code>var transformerRuleList = new sn_tfrm.TransformerRuleList()\n  .fromJSON()\n  .setName('Stock Report 05022019 JSON')\n  .addRule('ticker', '$.quote.symbol') \n  .addRule('change_percentage', '$.quote.changePercent') \n  .thenMultiply('100') \n  .thenRoundDown('0') \n  .addRule('close_price', '$.quote.close') \n  .thenAdaptCurrency('USD', false) \n  .addRule('summary') \n  .thenConcat('Shares of ') \n  .thenConcatSymbol('ticker') \n  .thenConcat(' closed at ') \n  .thenConcatSymbol('close_price'); \n</code>",
            "text2": null,
            "type": "Example",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "Object",
            "order": 10,
            "release": "paris",
            "sectionHeader": "Returns",
            "sectionTitle": null,
            "tableHeader": "Type,Description",
            "text": "Current TransformerRuleList object.",
            "text2": null,
            "type": "Return",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "outputNumericCurrencyValue",
            "order": 20,
            "release": "paris",
            "sectionHeader": "Parameters",
            "sectionTitle": null,
            "tableHeader": "Name,Type,Description",
            "text": "Boolean",
            "text2": "Optional. Flag that indicates whether to display the currency code.<p class=\"p\">Valid\n                  values:</p>\n<ul class=\"ul\" id=\"TRL-thenAdaptCurrency_S_B__ul_djt_wlw_qhb\">\n                  <li class=\"li\">true: do not display the country code; numeric value only</li>\n\n                  <li class=\"li\">false: display the country code</li>\n\n                </ul>\n<p class=\"p\">Default: false</p>",
            "type": "Parameter",
            "variable": null
          }
        ],
        "dc_identifier": "TRL-thenAdaptCurrency_S_B",
        "hasExample": true,
        "hasParameter": true,
        "hasReturn": true,
        "name": "thenAdaptCurrency(String currencyCode, Boolean outputNumericCurrencyValue)",
        "order": 14960,
        "parentId": "TransformerRuleListAPI",
        "parent_permalink": "class_namespace__scoped_transformerrulelist___scoped__global_sn_tfrm__paris",
        "release": "paris",
        "sectionHeader": null,
        "sectionTitle": null,
        "tableHeader": null,
        "text": "Adds an adapter to the current rule that ties the specified currency code to the output\n    field defined in the associated <span class=\"keyword apiname\">addRule()</span> call.",
        "text2": "<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This is an adapter method and cannot be used on its own. Adapter methods work\n                  in conjunction with the<span class=\"keyword apiname\">addRule()</span> method. They define\n                  adaptations to apply to the output field defined by the\n                    <span class=\"keyword apiname\">addRule()</span> method such as formatting, rounding, and applying\n                  patterns.</div></p>",
        "type": "Method",
        "variable": null
      },
      {
        "children": [
          {
            "children": null,
            "dc_identifier": null,
            "name": "Example",
            "order": 10,
            "release": "paris",
            "sectionHeader": null,
            "sectionTitle": null,
            "tableHeader": null,
            "text": "<code>var transformerRuleList = new sn_tfrm.TransformerRuleList()\n  .fromJSON()\n  .setName('Stock Report 05022019 JSON')\n  .addRule('ticker', '$.quote.symbol') \n  .addRule('change_percentage', '$.quote.changePercent') \n  .thenMultiply('100') \n  .thenRoundDown('0') \n  .addRule('close_price', '$.quote.close') \n  .thenAdaptCurrency('USD', false) \n  .addRule('daily', '$.quote.weekly') \n  .thenAdaptDuration('WEEK', 'DAY'); \n</code>",
            "text2": null,
            "type": "Example",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "Object",
            "order": 10,
            "release": "paris",
            "sectionHeader": "Returns",
            "sectionTitle": null,
            "tableHeader": "Type,Description",
            "text": "Current TransformerRuleList object.",
            "text2": null,
            "type": "Return",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "inputDuration",
            "order": 10,
            "release": "paris",
            "sectionHeader": "Parameters",
            "sectionTitle": null,
            "tableHeader": "Name,Type,Description",
            "text": "String",
            "text2": "Current unit of measure of the source field.<p class=\"p\">Valid values:</p>\n<ul class=\"ul\" id=\"TRL-thenAdaptDuration_S_S__ul_nwd_nnw_qhb\">\n                  <li class=\"li\">NANOSECOND</li>\n\n                  <li class=\"li\">MICROSECOND</li>\n\n                  <li class=\"li\">MILLISECOND</li>\n\n                  <li class=\"li\">SECOND</li>\n\n                  <li class=\"li\">MINUTE</li>\n\n                  <li class=\"li\">HOUR</li>\n\n                  <li class=\"li\">DAY</li>\n\n                  <li class=\"li\">WEEK</li>\n\n                </ul>",
            "type": "Parameter",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "outputDuration",
            "order": 20,
            "release": "paris",
            "sectionHeader": "Parameters",
            "sectionTitle": null,
            "tableHeader": "Name,Type,Description",
            "text": "String",
            "text2": "Unit of measure to convert the source field to in the output.<p class=\"p\">Valid\n                  values:</p>\n<ul class=\"ul\" id=\"TRL-thenAdaptDuration_S_S__ul_aly_tnw_qhb\">\n                  <li class=\"li\">NANOSECOND</li>\n\n                  <li class=\"li\">MICROSECOND</li>\n\n                  <li class=\"li\">MILLISECOND</li>\n\n                  <li class=\"li\">SECOND</li>\n\n                  <li class=\"li\">MINUTE</li>\n\n                  <li class=\"li\">HOUR</li>\n\n                  <li class=\"li\">DAY</li>\n\n                  <li class=\"li\">WEEK</li>\n\n                </ul>",
            "type": "Parameter",
            "variable": null
          }
        ],
        "dc_identifier": "TRL-thenAdaptDuration_S_S",
        "hasExample": true,
        "hasParameter": true,
        "hasReturn": true,
        "name": "thenAdaptDuration(String inputDuration, String outputDuration)",
        "order": 14970,
        "parentId": "TransformerRuleListAPI",
        "parent_permalink": "class_namespace__scoped_transformerrulelist___scoped__global_sn_tfrm__paris",
        "release": "paris",
        "sectionHeader": null,
        "sectionTitle": null,
        "tableHeader": null,
        "text": "Adds an adapter to the current rule that converts the source field from one unit of\n    measure to another, such as from minutes to seconds or weeks to days.",
        "text2": "<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This is an adapter method and cannot be used on its own. Adapter methods work\n                  in conjunction with the<span class=\"keyword apiname\">addRule()</span> method. They define\n                  adaptations to apply to the output field defined by the\n                    <span class=\"keyword apiname\">addRule()</span> method such as formatting, rounding, and applying\n                  patterns.</div></p>",
        "type": "Method",
        "variable": null
      },
      {
        "children": [
          {
            "children": null,
            "dc_identifier": null,
            "name": "Object",
            "order": 10,
            "release": "paris",
            "sectionHeader": "Returns",
            "sectionTitle": null,
            "tableHeader": "Type,Description",
            "text": "Current TransformerRuleList object.",
            "text2": null,
            "type": "Return",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "operand",
            "order": 10,
            "release": "paris",
            "sectionHeader": "Parameters",
            "sectionTitle": null,
            "tableHeader": "Name,Type,Description",
            "text": "Number",
            "text2": "Value to add to the source field.",
            "type": "Parameter",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "Example",
            "order": 10,
            "release": "paris",
            "sectionHeader": null,
            "sectionTitle": null,
            "tableHeader": null,
            "text": "<code>var transformerRuleList = new sn_tfrm.TransformerRuleList.fromJSON()\n  .setName('Stock Report 05182019 JSON')\n  .addSymbol('ticker', '$.symbol') \n  .addSymbol('change_percentage', '$.changePercent') \n  .thenMultiply('100') \n  .thenRoundDown('0') \n  .addSymbol('trade_price', '$.current_price')\n  .thenAdaptCurrency('USD', false) \n  .addMultiply('$.trade_quantity')\n  .thenAdd('4.5'); \n</code>",
            "text2": null,
            "type": "Example",
            "variable": null
          }
        ],
        "dc_identifier": "TRL-thenAdd_N",
        "hasExample": true,
        "hasParameter": true,
        "hasReturn": true,
        "name": "thenAdd(Number operand)",
        "order": 14980,
        "parentId": "TransformerRuleListAPI",
        "parent_permalink": "class_namespace__scoped_transformerrulelist___scoped__global_sn_tfrm__paris",
        "release": "paris",
        "sectionHeader": null,
        "sectionTitle": null,
        "tableHeader": null,
        "text": "Adds an adapter to the current rule that adds the passed in value to the source\n    field.",
        "text2": "<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This is an adapter method and cannot be used on its own. Adapter methods work\n                  in conjunction with the<span class=\"keyword apiname\">addRule()</span> method. They define\n                  adaptations to apply to the output field defined by the\n                    <span class=\"keyword apiname\">addRule()</span> method such as formatting, rounding, and applying\n                  patterns.</div></p>",
        "type": "Method",
        "variable": null
      },
      {
        "children": [
          {
            "children": null,
            "dc_identifier": null,
            "name": "map",
            "order": 10,
            "release": "paris",
            "sectionHeader": "Parameters",
            "sectionTitle": null,
            "tableHeader": "Name,Type,Description",
            "text": "Object",
            "text2": "Name/value pairs.<ul class=\"ul\" id=\"TRL-thenApplyMap_O__ul_vtw_jbz_qhb\">\n                  <li class=\"li\">name: text to locate in the source data element</li>\n\n                  \n                  <li class=\"li\">value: text to replace it with in the output</li>\n\n                </ul>",
            "type": "Parameter",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "Example",
            "order": 10,
            "release": "paris",
            "sectionHeader": null,
            "sectionTitle": null,
            "tableHeader": null,
            "text": "<code>var transformerRuleList = new sn_tfrm.TransformerRuleList()\n  .fromJSON()\n  .setName('Stock Report 05022019 JSON')\n  .addRule('ticker', '$.quote.symbol') \n  .addRule('change_percentage', '$.quote.changePercent') \n  .thenMultiply('100') \n  .thenRoundDown('0') \n  .addRule('close_price', '$.quote.close') \n  .thenAdaptCurrency('USD', false) \n  .addRule('company_info', '$.quote.company_info') \n  .thenApplyMap({'Inc.': 'Incorporated', 'St.': 'Street'});\n</code>",
            "text2": "In this , the <span class=\"keyword apiname\">thenApplyMap()</span> call searches the source text in the\n        company_info field for Inc. and St. and replaces them with Incorporated and Street in the\n        company_info field in the output.",
            "type": "Example",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "Object",
            "order": 10,
            "release": "paris",
            "sectionHeader": "Returns",
            "sectionTitle": null,
            "tableHeader": "Type,Description",
            "text": "Current TransformerRuleList object.",
            "text2": null,
            "type": "Return",
            "variable": null
          }
        ],
        "dc_identifier": "TRL-thenApplyMap_O",
        "hasExample": true,
        "hasParameter": true,
        "hasReturn": true,
        "name": "thenApplyMap(Object map)",
        "order": 14990,
        "parentId": "TransformerRuleListAPI",
        "parent_permalink": "class_namespace__scoped_transformerrulelist___scoped__global_sn_tfrm__paris",
        "release": "paris",
        "sectionHeader": null,
        "sectionTitle": null,
        "tableHeader": null,
        "text": "Adds an adapter to the current rule that searches the associated source field for a\n    list of strings and replaces them in the output with the specified replacement\n    values.",
        "text2": "<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This is an adapter method and cannot be used on its own. Adapter methods work\n                  in conjunction with the<span class=\"keyword apiname\">addRule()</span> method. They define\n                  adaptations to apply to the output field defined by the\n                    <span class=\"keyword apiname\">addRule()</span> method such as formatting, rounding, and applying\n                  patterns.</div></p>",
        "type": "Method",
        "variable": null
      },
      {
        "children": [
          {
            "children": null,
            "dc_identifier": null,
            "name": "Example",
            "order": 10,
            "release": "paris",
            "sectionHeader": null,
            "sectionTitle": null,
            "tableHeader": null,
            "text": "<code>var transformerRuleList = new sn_tfrm.TransformerRuleList()\n  .fromJSON()\n  .setName('Stock Report 05022019 JSON')\n  .addRule('ticker', '$.quote.symbol') \n  .addRule('change_percentage', '$.quote.changePercent') \n  .thenMultiply('100') \n  .thenRoundDown('0') \n  .addRule('close_price', '$.quote.close') \n  .thenAdaptCurrency('USD', false) \n  .addRule('company', '$.quote.company') \n  .thenApplyPattern('(.+)(\\\\w{3}\\\\.)', '$1Incorporated');\n</code>",
            "text2": "In this , any company name that ends with \"Inc.\" is transformed to \"Incorporated\",\n        such as Company Inc. to Company Incorporated.",
            "type": "Example",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "Object",
            "order": 10,
            "release": "paris",
            "sectionHeader": "Returns",
            "sectionTitle": null,
            "tableHeader": "Type,Description",
            "text": "Current TransformerRuleList object.",
            "text2": null,
            "type": "Return",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "matchPattern",
            "order": 10,
            "release": "paris",
            "sectionHeader": "Parameters",
            "sectionTitle": null,
            "tableHeader": "Name,Type,Description",
            "text": "String",
            "text2": "Regex pattern to use to locate the text to replace/reformat.",
            "type": "Parameter",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "outputPattern",
            "order": 20,
            "release": "paris",
            "sectionHeader": "Parameters",
            "sectionTitle": null,
            "tableHeader": "Name,Type,Description",
            "text": "String",
            "text2": "Regex pattern to use to update the located text.",
            "type": "Parameter",
            "variable": null
          }
        ],
        "dc_identifier": "TRL-thenApplyPattern_S_S",
        "hasExample": true,
        "hasParameter": true,
        "hasReturn": true,
        "name": "thenApplyPattern(String matchPattern, String outputPattern",
        "order": 15000,
        "parentId": "TransformerRuleListAPI",
        "parent_permalink": "class_namespace__scoped_transformerrulelist___scoped__global_sn_tfrm__paris",
        "release": "paris",
        "sectionHeader": null,
        "sectionTitle": null,
        "tableHeader": null,
        "text": "Adds an adapter to the current rule that matches a specified regex pattern to content\n    in the source field and then replaces/reformats that content with a second regex pattern and\n    stores that value in the output.",
        "text2": "<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This is an adapter method and cannot be used on its own. Adapter methods work\n                  in conjunction with the<span class=\"keyword apiname\">addRule()</span> method. They define\n                  adaptations to apply to the output field defined by the\n                    <span class=\"keyword apiname\">addRule()</span> method such as formatting, rounding, and applying\n                  patterns.</div></p>",
        "type": "Method",
        "variable": null
      },
      {
        "children": [
          {
            "children": null,
            "dc_identifier": null,
            "name": "operand",
            "order": 10,
            "release": "paris",
            "sectionHeader": "Parameters",
            "sectionTitle": null,
            "tableHeader": "Name,Type,Description",
            "text": "Number",
            "text2": "Decimal position to the right of the decimal point at which to round the number\n                up (apply ceiling). <p class=\"p\">For example, if this value is 2 and the source data element\n                  is 6.421, the resulting value is 6.43.</p>",
            "type": "Parameter",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "Example",
            "order": 10,
            "release": "paris",
            "sectionHeader": null,
            "sectionTitle": null,
            "tableHeader": null,
            "text": "<code>var transformerRuleList = new sn_tfrm.TransformerRuleList()\n  .fromJSON()\n  .setName('Mortgage Rates 05022019 JSON')\n  .addRule('interest_rate', '$.quote.interest_rate') \n  .thenCeiling('2') // Always round the interest rate up to the hundredths place \n  .addRule('monthly_payment', '$.quote.total_loan_amount') \n  .thenDivideBy('180'); \n</code>",
            "text2": null,
            "type": "Example",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "Object",
            "order": 10,
            "release": "paris",
            "sectionHeader": "Returns",
            "sectionTitle": null,
            "tableHeader": "Type,Description",
            "text": "Current TransformerRuleList object.",
            "text2": null,
            "type": "Return",
            "variable": null
          }
        ],
        "dc_identifier": "TRL-thenCeiling_N",
        "hasExample": true,
        "hasParameter": true,
        "hasReturn": true,
        "name": "thenCeiling(Number operand)",
        "order": 15010,
        "parentId": "TransformerRuleListAPI",
        "parent_permalink": "class_namespace__scoped_transformerrulelist___scoped__global_sn_tfrm__paris",
        "release": "paris",
        "sectionHeader": null,
        "sectionTitle": null,
        "tableHeader": null,
        "text": "Adds an action to the current rule to round the source field up at the decimal position\n    specified by the passed in value.",
        "text2": "<p>Unlike straight rounding where the number is rounded based on the value of the digit in the\n        specified decimal position (0-4 round down, 5-9 round up), ceiling always rounds up. For\n        example, the ceiling value for 2.156 and 2.152 is always 2.16 for the passed in decimal\n        position of 2; whereas for straight rounding the values would be 2.16 and 2.15 respectively.\n        For negative numbers, the ceiling operation makes the number more positive, as in the\n        ceiling value of -2.156 is -2.15; whereas the same number rounded up makes the value more\n        negative, -2.16.</p><p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This is an adapter method and cannot be used on its own. Adapter methods work\n                  in conjunction with the<span class=\"keyword apiname\">addRule()</span> method. They define\n                  adaptations to apply to the output field defined by the\n                    <span class=\"keyword apiname\">addRule()</span> method such as formatting, rounding, and applying\n                  patterns.</div></p>",
        "type": "Method",
        "variable": null
      },
      {
        "children": [
          {
            "children": null,
            "dc_identifier": null,
            "name": "Example",
            "order": 10,
            "release": "paris",
            "sectionHeader": null,
            "sectionTitle": null,
            "tableHeader": null,
            "text": "<code>var transformerRuleList = new sn_tfrm.TransformerRuleList()\n  .fromJSON()\n  .setName('Stock Report 05022019 JSON')\n  .addRule('ticker', '$.quote.symbol') \n  .addRule('change_percentage', '$.quote.changePercent') \n  .thenMultiply('100') \n  .thenRoundDown('0') \n  .addRule('close_price', '$.quote.close') \n  .thenAdaptCurrency('USD', false) \n  .addRule('summary') \n  .thenConcat('Shares of ') \n  .thenConcatSymbol('ticker') \n  .thenConcat(' closed at ') \n  .thenConcatSymbol('close_price'); \n</code>",
            "text2": null,
            "type": "Example",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "Object",
            "order": 10,
            "release": "paris",
            "sectionHeader": "Returns",
            "sectionTitle": null,
            "tableHeader": "Type,Description",
            "text": "Current TransformerRuleList object.",
            "text2": null,
            "type": "Return",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "value",
            "order": 10,
            "release": "paris",
            "sectionHeader": "Parameters",
            "sectionTitle": null,
            "tableHeader": "Name,Type,Description",
            "text": "String",
            "text2": "Text to concatenate to the end of the current data element.",
            "type": "Parameter",
            "variable": null
          }
        ],
        "dc_identifier": "TRL-thenConcat_S",
        "hasExample": true,
        "hasParameter": true,
        "hasReturn": true,
        "name": "thenConcat(String value)",
        "order": 15020,
        "parentId": "TransformerRuleListAPI",
        "parent_permalink": "class_namespace__scoped_transformerrulelist___scoped__global_sn_tfrm__paris",
        "release": "paris",
        "sectionHeader": null,
        "sectionTitle": null,
        "tableHeader": null,
        "text": "Adds an adapter to the current rule that concatenates the passed in string to the\n    output field.",
        "text2": "<p>Unlike other adapter methods, this method does not have to be applied to a source field.\n        You can use this method to create completely new data strings in the output.</p><p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This is an adapter method and cannot be used on its own. Adapter methods work\n                  in conjunction with the<span class=\"keyword apiname\">addRule()</span> method. They define\n                  adaptations to apply to the output field defined by the\n                    <span class=\"keyword apiname\">addRule()</span> method such as formatting, rounding, and applying\n                  patterns.</div></p>",
        "type": "Method",
        "variable": null
      },
      {
        "children": [
          {
            "children": null,
            "dc_identifier": null,
            "name": "Example",
            "order": 10,
            "release": "paris",
            "sectionHeader": null,
            "sectionTitle": null,
            "tableHeader": null,
            "text": "<code>var transformerRuleList = new sn_tfrm.TransformerRuleList()\n  .fromJSON()\n  .setName('Stock Report 05022019 JSON')\n  .addRule('ticker', '$.quote.symbol') \n  .addRule('change_percentage', '$.quote.changePercent') \n  .thenMultiply('100') \n  .thenRoundDown('0') \n  .addRule('close_price', '$.quote.close') \n  .thenAdaptCurrency('USD', false) \n  .addRule('summary') \n  .thenConcat('Shares of ') \n  .thenConcatSymbol('ticker') \n  .thenConcat(' closed at ') \n  .thenConcatSymbol('close_price'); \n</code>",
            "text2": null,
            "type": "Example",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "Object",
            "order": 10,
            "release": "paris",
            "sectionHeader": "Returns",
            "sectionTitle": null,
            "tableHeader": "Type,Description",
            "text": "Current TransformerRuleList object.",
            "text2": null,
            "type": "Return",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "symbol",
            "order": 10,
            "release": "paris",
            "sectionHeader": "Parameters",
            "sectionTitle": null,
            "tableHeader": "Name,Type,Description",
            "text": "String",
            "text2": "Name of the rules list element to append to the output field.",
            "type": "Parameter",
            "variable": null
          }
        ],
        "dc_identifier": "TRL-thenConcatSymbol_S",
        "hasExample": true,
        "hasParameter": true,
        "hasReturn": true,
        "name": "thenConcatSymbol(String symbol)",
        "order": 15030,
        "parentId": "TransformerRuleListAPI",
        "parent_permalink": "class_namespace__scoped_transformerrulelist___scoped__global_sn_tfrm__paris",
        "release": "paris",
        "sectionHeader": null,
        "sectionTitle": null,
        "tableHeader": null,
        "text": "Adds an adapter to the current rule that concatenates the value of a field previously\n    defined in the rules list to the current output field.",
        "text2": "<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This is an adapter method and cannot be used on its own. Adapter methods work\n                  in conjunction with the<span class=\"keyword apiname\">addRule()</span> method. They define\n                  adaptations to apply to the output field defined by the\n                    <span class=\"keyword apiname\">addRule()</span> method such as formatting, rounding, and applying\n                  patterns.</div></p>",
        "type": "Method",
        "variable": null
      },
      {
        "children": [
          {
            "children": null,
            "dc_identifier": null,
            "name": "operand",
            "order": 10,
            "release": "paris",
            "sectionHeader": "Parameters",
            "sectionTitle": null,
            "tableHeader": "Name,Type,Description",
            "text": "Number",
            "text2": "Value by which to divide the source field.",
            "type": "Parameter",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "Example",
            "order": 10,
            "release": "paris",
            "sectionHeader": null,
            "sectionTitle": null,
            "tableHeader": null,
            "text": "<code>var transformerRuleList = new sn_tfrm.TransformerRuleList()\n  .fromJSON()\n  .setName('Stock Report 05022019 JSON')\n  .addRule('ticker', '$.quote.symbol') \n  .addRule('change_percentage', '$.quote.changePercent') \n  .thenMultiply('100') \n  .thenRoundDown('0') \n  .addRule('dividend_per_share', '$.quote.total_dividend') \n  .thenDivideBy('$.quote.total_shares'); \n</code>",
            "text2": null,
            "type": "Example",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "Object",
            "order": 10,
            "release": "paris",
            "sectionHeader": "Returns",
            "sectionTitle": null,
            "tableHeader": "Type,Description",
            "text": "Current TransformerRuleList object.",
            "text2": null,
            "type": "Return",
            "variable": null
          }
        ],
        "dc_identifier": "TRL-thenDivideBy_N",
        "hasExample": true,
        "hasParameter": true,
        "hasReturn": true,
        "name": "thenDivideBy(Number operand)",
        "order": 15040,
        "parentId": "TransformerRuleListAPI",
        "parent_permalink": "class_namespace__scoped_transformerrulelist___scoped__global_sn_tfrm__paris",
        "release": "paris",
        "sectionHeader": null,
        "sectionTitle": null,
        "tableHeader": null,
        "text": "Adds an adapter to the current rule that divides the source field by the passed in\n    value.",
        "text2": "<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This is an adapter method and cannot be used on its own. Adapter methods work\n                  in conjunction with the<span class=\"keyword apiname\">addRule()</span> method. They define\n                  adaptations to apply to the output field defined by the\n                    <span class=\"keyword apiname\">addRule()</span> method such as formatting, rounding, and applying\n                  patterns.</div></p>",
        "type": "Method",
        "variable": null
      },
      {
        "children": [
          {
            "children": null,
            "dc_identifier": null,
            "name": "Example",
            "order": 10,
            "release": "paris",
            "sectionHeader": null,
            "sectionTitle": null,
            "tableHeader": null,
            "text": "<code>var transformerRuleList = new sn_tfrm.TransformerRuleList()\n  .fromJSON()\n  .setName('Stock Report 05022019 JSON')\n  .addRule('ticker', '$.quote.symbol') \n  .addRule('change_percentage', '$.quote.changePercent') \n  .thenMultiply('100') \n  .thenRoundDown('0') \n  .addRule('dividend_per_share', '$.quote.total_shares') \n  .thenDivideInto('$.quote.total_dividends'); \n</code>",
            "text2": null,
            "type": "Example",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "Object",
            "order": 10,
            "release": "paris",
            "sectionHeader": "Returns",
            "sectionTitle": null,
            "tableHeader": "Type,Description",
            "text": "Current TransformerRuleList object.",
            "text2": null,
            "type": "Return",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "operand",
            "order": 10,
            "release": "paris",
            "sectionHeader": "Parameters",
            "sectionTitle": null,
            "tableHeader": "Name,Type,Description",
            "text": "Number",
            "text2": "Value into which to divide the source field.",
            "type": "Parameter",
            "variable": null
          }
        ],
        "dc_identifier": "TRL-thenDivideInto_N",
        "hasExample": true,
        "hasParameter": true,
        "hasReturn": true,
        "name": "thenDivideInto(Number operand)",
        "order": 15050,
        "parentId": "TransformerRuleListAPI",
        "parent_permalink": "class_namespace__scoped_transformerrulelist___scoped__global_sn_tfrm__paris",
        "release": "paris",
        "sectionHeader": null,
        "sectionTitle": null,
        "tableHeader": null,
        "text": "Adds an adapter to the current rule that divides the passed in value by the source\n    field.",
        "text2": "<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This is an adapter method and cannot be used on its own. Adapter methods work\n                  in conjunction with the<span class=\"keyword apiname\">addRule()</span> method. They define\n                  adaptations to apply to the output field defined by the\n                    <span class=\"keyword apiname\">addRule()</span> method such as formatting, rounding, and applying\n                  patterns.</div></p>",
        "type": "Method",
        "variable": null
      },
      {
        "children": [
          {
            "children": null,
            "dc_identifier": null,
            "name": "Example",
            "order": 10,
            "release": "paris",
            "sectionHeader": null,
            "sectionTitle": null,
            "tableHeader": null,
            "text": "<code>var transformerRuleList = new sn_tfrm.TransformerRuleList()\n  .fromJSON()\n  .setName('Mortgage Rates 05022019 JSON')\n  .addRule('interest_rate', '$.quote.interest_rate') \n  .thenFloor('2') // Always round the interest rate down to the hundreths place \n  .addRule('monthly_payment', '$.quote.total_loan_amount') \n  .thenDivideBy('180'); \n</code>",
            "text2": null,
            "type": "Example",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "Object",
            "order": 10,
            "release": "paris",
            "sectionHeader": "Returns",
            "sectionTitle": null,
            "tableHeader": "Type,Description",
            "text": "Current TransformerRuleList object.",
            "text2": null,
            "type": "Return",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "operand",
            "order": 10,
            "release": "paris",
            "sectionHeader": "Parameters",
            "sectionTitle": null,
            "tableHeader": "Name,Type,Description",
            "text": "Number",
            "text2": "Decimal position to the right of the decimal point at which to round the number\n                down (apply floor). <p class=\"p\">For example, if this value is 2 and the source data element\n                  is 6.427, the resulting value is 6.42.</p>",
            "type": "Parameter",
            "variable": null
          }
        ],
        "dc_identifier": "TRL-thenFloor_N",
        "hasExample": true,
        "hasParameter": true,
        "hasReturn": true,
        "name": "thenFloor(Number operand)",
        "order": 15060,
        "parentId": "TransformerRuleListAPI",
        "parent_permalink": "class_namespace__scoped_transformerrulelist___scoped__global_sn_tfrm__paris",
        "release": "paris",
        "sectionHeader": null,
        "sectionTitle": null,
        "tableHeader": null,
        "text": "Adds an adapter to the current rule that rounds the source field down at the decimal\n    position specified by the passed in value and stores it in the output.",
        "text2": "<p>Unlike straight rounding where the number is rounded based on the value of the digit in the\n        specified decimal position (0-4 round down, 5-9 round up), floor always rounds down. For\n        example, the floor value for 2.156 and 2.152 is always 2.15 for the passed in decimal\n        position of 2; whereas for straight rounding the values would be 2.16 and 2.15 respectively.\n        For negative numbers, the floor operation makes the number more negative, as in the floor\n        value of -2.156 is -2.16; whereas the same number rounded down makes the value more\n        positive, -2.15.</p><p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This is an adapter method and cannot be used on its own. Adapter methods work\n                  in conjunction with the<span class=\"keyword apiname\">addRule()</span> method. They define\n                  adaptations to apply to the output field defined by the\n                    <span class=\"keyword apiname\">addRule()</span> method such as formatting, rounding, and applying\n                  patterns.</div></p>",
        "type": "Method",
        "variable": null
      },
      {
        "children": [
          {
            "children": null,
            "dc_identifier": null,
            "name": "matchPattern",
            "order": 10,
            "release": "paris",
            "sectionHeader": "Parameters",
            "sectionTitle": null,
            "tableHeader": "Name,Type,Description",
            "text": "String",
            "text2": "Pattern to match against the source field.<p class=\"p\">Valid values:</p>\n<ul class=\"ul\" id=\"TRL-thenFormat_S_S__ul_zyx_p5w_qhb\">\n                  <li class=\"li\">@: any character</li>\n\n                  <li class=\"li\">#: decimal digit</li>\n\n                  <li class=\"li\">\\: literal escape (\\@ for the @ symbol)</li>\n\n                </ul>",
            "type": "Parameter",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "Example",
            "order": 10,
            "release": "paris",
            "sectionHeader": null,
            "sectionTitle": null,
            "tableHeader": null,
            "text": "<code>var transformerRuleList = new sn_tfrm.TransformerRuleList()\n  .fromJSON()\n  .setName('Stock Report 05022019 JSON')\n  .addRule('ticker', '$.quote.symbol') \n  .addRule('change_percentage', '$.quote.changePercent') \n  .thenMultiply('100') \n  .thenRoundDown('0') \n  .addRule('close_price', '$.quote.close') \n  .thenAdaptCurrency('USD', false) \n  .addRule('date', '$.quote.date') \n  .thenFormat('####/##/##', '#### ##-##'); \n</code>",
            "text2": "This  reformats the quote date from YYYY/MM/DD to YYYY MM-DD.",
            "type": "Example",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "Object",
            "order": 10,
            "release": "paris",
            "sectionHeader": "Returns",
            "sectionTitle": null,
            "tableHeader": "Type,Description",
            "text": "Current TransformerRuleList object.",
            "text2": null,
            "type": "Return",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "outputPattern",
            "order": 20,
            "release": "paris",
            "sectionHeader": "Parameters",
            "sectionTitle": null,
            "tableHeader": "Name,Type,Description",
            "text": "String",
            "text2": "Pattern to replace the content with in the output.<p class=\"p\">Valid values:</p>\n<ul class=\"ul\" id=\"TRL-thenFormat_S_S__ul_nth_jvw_qhb\">\n                  <li class=\"li\">@: any character</li>\n\n                  <li class=\"li\">#: decimal digit</li>\n\n                  <li class=\"li\">\\: literal escape (\\@ for the @ symbol)</li>\n\n                </ul>",
            "type": "Parameter",
            "variable": null
          }
        ],
        "dc_identifier": "TRL-thenFormat_S_S",
        "hasExample": true,
        "hasParameter": true,
        "hasReturn": true,
        "name": "thenFormat(String matchPattern, String outputPattern)",
        "order": 15070,
        "parentId": "TransformerRuleListAPI",
        "parent_permalink": "class_namespace__scoped_transformerrulelist___scoped__global_sn_tfrm__paris",
        "release": "paris",
        "sectionHeader": null,
        "sectionTitle": null,
        "tableHeader": null,
        "text": "Adds an adapter to the current rule that reformats the content in the source field that\n    matches the specified match pattern, with the specified output pattern.",
        "text2": "<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This is an adapter method and cannot be used on its own. Adapter methods work\n                  in conjunction with the<span class=\"keyword apiname\">addRule()</span> method. They define\n                  adaptations to apply to the output field defined by the\n                    <span class=\"keyword apiname\">addRule()</span> method such as formatting, rounding, and applying\n                  patterns.</div></p>",
        "type": "Method",
        "variable": null
      },
      {
        "children": [
          {
            "children": null,
            "dc_identifier": null,
            "name": "Example",
            "order": 10,
            "release": "paris",
            "sectionHeader": null,
            "sectionTitle": null,
            "tableHeader": null,
            "text": "<code>var transformerRuleList = new sn_tfrm.TransformerRuleList()\n  .fromJSON()\n  .setName('Mortgage Rates 05022019 JSON')\n  .addRule('lowest_interest_rate', '$.quote.interest_rate') \n  .thenMax('3.5') // Interest rate cannot be less than 3.5%\n  .addRule('dividend_per_share', '$.quote.total_shares') \n  .thenDivideInto('$.quote.total_dividends'); \n</code>",
            "text2": null,
            "type": "Example",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "Object",
            "order": 10,
            "release": "paris",
            "sectionHeader": "Returns",
            "sectionTitle": null,
            "tableHeader": "Type,Description",
            "text": "Current TransformerRuleList object.",
            "text2": null,
            "type": "Return",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "operand",
            "order": 10,
            "release": "paris",
            "sectionHeader": "Parameters",
            "sectionTitle": null,
            "tableHeader": "Name,Type,Description",
            "text": "Number",
            "text2": "Value to compare to the source field.",
            "type": "Parameter",
            "variable": null
          }
        ],
        "dc_identifier": "TRL-thenMax_N",
        "hasExample": true,
        "hasParameter": true,
        "hasReturn": true,
        "name": "thenMax(Number operand)",
        "order": 15080,
        "parentId": "TransformerRuleListAPI",
        "parent_permalink": "class_namespace__scoped_transformerrulelist___scoped__global_sn_tfrm__paris",
        "release": "paris",
        "sectionHeader": null,
        "sectionTitle": null,
        "tableHeader": null,
        "text": "Adds an adapter to the current rule that compares the passed in value against the\n    source field and copies the greater of the two values to the output field.",
        "text2": "<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This is an adapter method and cannot be used on its own. Adapter methods work\n                  in conjunction with the<span class=\"keyword apiname\">addRule()</span> method. They define\n                  adaptations to apply to the output field defined by the\n                    <span class=\"keyword apiname\">addRule()</span> method such as formatting, rounding, and applying\n                  patterns.</div></p>",
        "type": "Method",
        "variable": null
      },
      {
        "children": [
          {
            "children": null,
            "dc_identifier": null,
            "name": "Example",
            "order": 10,
            "release": "paris",
            "sectionHeader": null,
            "sectionTitle": null,
            "tableHeader": null,
            "text": "<code>var transformerRuleList = new sn_tfrm.TransformerRuleList()\n  .fromJSON()\n  .setName('Stock Report 05022019 JSON')\n  .addSymbol('broker_fee_percentage', '$.quote.broker_fee') \n  .thenMin('10') // Maximum of 10% broker fee\n  .addSymbol('dividend_per_share', '$.quote.total_shares') \n  .thenDivideInto('$.quote.total_dividends'); \n</code>",
            "text2": null,
            "type": "Example",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "Object",
            "order": 10,
            "release": "paris",
            "sectionHeader": "Returns",
            "sectionTitle": null,
            "tableHeader": "Type,Description",
            "text": "Current TransformerRuleList object.",
            "text2": null,
            "type": "Return",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "operand",
            "order": 10,
            "release": "paris",
            "sectionHeader": "Parameters",
            "sectionTitle": null,
            "tableHeader": "Name,Type,Description",
            "text": "Number",
            "text2": "Value to compare to the source field.",
            "type": "Parameter",
            "variable": null
          }
        ],
        "dc_identifier": "TRL-thenMin_N",
        "hasExample": true,
        "hasParameter": true,
        "hasReturn": true,
        "name": "thenMin(Number operand)",
        "order": 15090,
        "parentId": "TransformerRuleListAPI",
        "parent_permalink": "class_namespace__scoped_transformerrulelist___scoped__global_sn_tfrm__paris",
        "release": "paris",
        "sectionHeader": null,
        "sectionTitle": null,
        "tableHeader": null,
        "text": "Adds an adapter to the current rule that compares the passed in value against the\n    source field and copies the lower of the two values to the output field.",
        "text2": "<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This is an adapter method and cannot be used on its own. Adapter methods work\n                  in conjunction with the<span class=\"keyword apiname\">addRule()</span> method. They define\n                  adaptations to apply to the output field defined by the\n                    <span class=\"keyword apiname\">addRule()</span> method such as formatting, rounding, and applying\n                  patterns.</div></p>",
        "type": "Method",
        "variable": null
      },
      {
        "children": [
          {
            "children": null,
            "dc_identifier": null,
            "name": "Object",
            "order": 10,
            "release": "paris",
            "sectionHeader": "Returns",
            "sectionTitle": null,
            "tableHeader": "Type,Description",
            "text": "Current TransformerRuleList object.",
            "text2": null,
            "type": "Return",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "operand",
            "order": 10,
            "release": "paris",
            "sectionHeader": "Parameters",
            "sectionTitle": null,
            "tableHeader": "Name,Type,Description",
            "text": "Number",
            "text2": "Value by which to multiply the source field.",
            "type": "Parameter",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "Example",
            "order": 10,
            "release": "paris",
            "sectionHeader": null,
            "sectionTitle": null,
            "tableHeader": null,
            "text": "<code>var transformerRuleList = new sn_tfrm.TransformerRuleList()\n  .fromJSON()\n  .setName('Stock Report 05022019 JSON')\n  .addRule('ticker', '$.quote.symbol') \n  .addRule('change_percentage', '$.quote.changePercent') \n  .thenMultiply('100') \n  .thenRoundDown('0') \n  .addRule('close_price', '$.quote.close') \n  .thenAdaptCurrency('USD', false) \n  .addRule('summary') \n  .thenConcat('Shares of ') \n  .thenConcatSymbol('ticker') \n  .thenConcat(' closed at ') \n  .thenConcatSymbol('close_price'); \n</code>",
            "text2": null,
            "type": "Example",
            "variable": null
          }
        ],
        "dc_identifier": "TRL-thenMultiply_N",
        "hasExample": true,
        "hasParameter": true,
        "hasReturn": true,
        "name": "thenMultiply(Number operand)",
        "order": 15100,
        "parentId": "TransformerRuleListAPI",
        "parent_permalink": "class_namespace__scoped_transformerrulelist___scoped__global_sn_tfrm__paris",
        "release": "paris",
        "sectionHeader": null,
        "sectionTitle": null,
        "tableHeader": null,
        "text": "Adds an adapter to the current rule that multiplies the source field by the passed in\n    value.",
        "text2": "<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This is an adapter method and cannot be used on its own. Adapter methods work\n                  in conjunction with the<span class=\"keyword apiname\">addRule()</span> method. They define\n                  adaptations to apply to the output field defined by the\n                    <span class=\"keyword apiname\">addRule()</span> method such as formatting, rounding, and applying\n                  patterns.</div></p>",
        "type": "Method",
        "variable": null
      },
      {
        "children": [
          {
            "children": null,
            "dc_identifier": null,
            "name": "Example",
            "order": 10,
            "release": "paris",
            "sectionHeader": null,
            "sectionTitle": null,
            "tableHeader": null,
            "text": "<code>var transformerRuleList = new sn_tfrm.TransformerRuleList()\n  .fromJSON()\n  .setName('Stock Report 05022019 JSON')\n  .addRule('ticker', '$.quote.symbol') \n  .addRule('change_percentage', '$.quote.changePercent') \n  .thenMultiply('100') \n  .thenRoundDown('0') \n  .addRule('close_price', '$.quote.close') \n  .thenAdaptCurrency('USD', false) \n  .addRule('company', '$.quote.company') \n  .thenReplace('Inc.', 'Incorporated');\n</code>",
            "text2": "In this , any company name that ends with \"Inc.\" is transformed to \"Incorporated\",\n        such as Company Inc. to Company Incorporated.",
            "type": "Example",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "Object",
            "order": 10,
            "release": "paris",
            "sectionHeader": "Returns",
            "sectionTitle": null,
            "tableHeader": "Type,Description",
            "text": "Current TransformerRuleList object.",
            "text2": null,
            "type": "Return",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "matchString",
            "order": 10,
            "release": "paris",
            "sectionHeader": "Parameters",
            "sectionTitle": null,
            "tableHeader": "Name,Type,Description",
            "text": "String",
            "text2": "String to match against the source field to identify the text to\n                replace.",
            "type": "Parameter",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "replaceString",
            "order": 20,
            "release": "paris",
            "sectionHeader": "Parameters",
            "sectionTitle": null,
            "tableHeader": "Name,Type,Description",
            "text": "String",
            "text2": "String with which to replace the matching text.",
            "type": "Parameter",
            "variable": null
          }
        ],
        "dc_identifier": "TRL-thenReplace_S_S",
        "hasExample": true,
        "hasParameter": true,
        "hasReturn": true,
        "name": "thenReplace(String matchString, String replaceString)",
        "order": 15110,
        "parentId": "TransformerRuleListAPI",
        "parent_permalink": "class_namespace__scoped_transformerrulelist___scoped__global_sn_tfrm__paris",
        "release": "paris",
        "sectionHeader": null,
        "sectionTitle": null,
        "tableHeader": null,
        "text": "Adds an adapter to the current rule that finds all text within the source field that\n    matches a specified string and replaces it with an updated string.",
        "text2": "<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This is an adapter method and cannot be used on its own. Adapter methods work\n                  in conjunction with the<span class=\"keyword apiname\">addRule()</span> method. They define\n                  adaptations to apply to the output field defined by the\n                    <span class=\"keyword apiname\">addRule()</span> method such as formatting, rounding, and applying\n                  patterns.</div></p>",
        "type": "Method",
        "variable": null
      },
      {
        "children": [
          {
            "children": null,
            "dc_identifier": null,
            "name": "operand",
            "order": 10,
            "release": "paris",
            "sectionHeader": "Parameters",
            "sectionTitle": null,
            "tableHeader": "Name,Type,Description",
            "text": "Number",
            "text2": "Decimal position to the right of the decimal point at which to round the number\n                up. <p class=\"p\">For example, if this value is 2 and the source data element is 6.422, the\n                  resulting value is 6.43.</p>",
            "type": "Parameter",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "Example",
            "order": 10,
            "release": "paris",
            "sectionHeader": null,
            "sectionTitle": null,
            "tableHeader": null,
            "text": "<code>var transformerRuleList = new sn_tfrm.TransformerRuleList()\n  .fromJSON()\n  .setName('Mortgage Rates 05022019 JSON')\n  .addRule('interest_rate', '$.quote.interest_rate') \n  .thenRoundUp('2') // Always round the interest rate up to the hundredths place \n  .addRule('monthly_payment', '$.quote.total_loan_amount') \n  .thenDivideBy('180'); \n</code>",
            "text2": null,
            "type": "Example",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "Object",
            "order": 10,
            "release": "paris",
            "sectionHeader": "Returns",
            "sectionTitle": null,
            "tableHeader": "Type,Description",
            "text": "Current TransformerRuleList object.",
            "text2": null,
            "type": "Return",
            "variable": null
          }
        ],
        "dc_identifier": "TRL-thenRoundUp_N",
        "hasExample": true,
        "hasParameter": true,
        "hasReturn": true,
        "name": "thenRound Up(Number operand)",
        "order": 15120,
        "parentId": "TransformerRuleListAPI",
        "parent_permalink": "class_namespace__scoped_transformerrulelist___scoped__global_sn_tfrm__paris",
        "release": "paris",
        "sectionHeader": null,
        "sectionTitle": null,
        "tableHeader": null,
        "text": "Adds an adapter to the current rule that rounds the source data element up at the\n    decimal position specified by the passed in value.",
        "text2": "<p>For negative numbers, the <span class=\"keyword apiname\">thenRoundUp()</span> method makes the number more\n        negative; the round up value of -2.156 is -2.16. The <span class=\"keyword apiname\">thenCeiling()</span> method\n        makes the same number more positive, -2.15.</p><p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This is an adapter method and cannot be used on its own. Adapter methods work\n                  in conjunction with the<span class=\"keyword apiname\">addRule()</span> method. They define\n                  adaptations to apply to the output field defined by the\n                    <span class=\"keyword apiname\">addRule()</span> method such as formatting, rounding, and applying\n                  patterns.</div></p>",
        "type": "Method",
        "variable": null
      },
      {
        "children": [
          {
            "children": null,
            "dc_identifier": null,
            "name": "Object",
            "order": 10,
            "release": "paris",
            "sectionHeader": "Returns",
            "sectionTitle": null,
            "tableHeader": "Type,Description",
            "text": "Current TransformerRuleList object.",
            "text2": null,
            "type": "Return",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "operand",
            "order": 10,
            "release": "paris",
            "sectionHeader": "Parameters",
            "sectionTitle": null,
            "tableHeader": "Name,Type,Description",
            "text": "Number",
            "text2": "Decimal position to the right of the decimal point at which to round the number\n                down. <p class=\"p\">For example, if this value is 2 and the source data element is 6.427, the\n                  resulting value is 6.42.</p>",
            "type": "Parameter",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "Example",
            "order": 10,
            "release": "paris",
            "sectionHeader": null,
            "sectionTitle": null,
            "tableHeader": null,
            "text": "<code>var transformerRuleList = new sn_tfrm.TransformerRuleList90\n  .fromJSON()\n  .setName('Mortgage Rates 05022019 JSON')\n  .addRule('interest_rate', '$.quote.interest_rate') \n  .thenRoundDown('2') // Always round the interest rate down to the hundredths place \n  .addRule('monthly_payment', '$.quote.total_loan_amount') \n  .thenDivideBy('180'); \n</code>",
            "text2": null,
            "type": "Example",
            "variable": null
          }
        ],
        "dc_identifier": "TRL-thenRoundDown_N",
        "hasExample": true,
        "hasParameter": true,
        "hasReturn": true,
        "name": "thenRoundDown(Number operand)",
        "order": 15130,
        "parentId": "TransformerRuleListAPI",
        "parent_permalink": "class_namespace__scoped_transformerrulelist___scoped__global_sn_tfrm__paris",
        "release": "paris",
        "sectionHeader": null,
        "sectionTitle": null,
        "tableHeader": null,
        "text": "Adds an adapter to the current rule that rounds the source field down at the decimal\n    position specified by the passed in value.",
        "text2": "<p>For negative numbers, the <span class=\"keyword apiname\">thenRoundDown()</span> method makes the number more\n        positive; the round down value of -2.156 is -2.15. The <span class=\"keyword apiname\">thenFloor()</span> method\n        makes the same number more negative, -2.16.</p><p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This is an adapter method and cannot be used on its own. Adapter methods work\n                  in conjunction with the<span class=\"keyword apiname\">addRule()</span> method. They define\n                  adaptations to apply to the output field defined by the\n                    <span class=\"keyword apiname\">addRule()</span> method such as formatting, rounding, and applying\n                  patterns.</div></p>",
        "type": "Method",
        "variable": null
      },
      {
        "children": [
          {
            "children": null,
            "dc_identifier": null,
            "name": "Example",
            "order": 10,
            "release": "paris",
            "sectionHeader": null,
            "sectionTitle": null,
            "tableHeader": null,
            "text": "<code>var transformerRuleList = new sn_tfrm.TransformerRuleList()\n  .fromJSON()\n  .setName('Stock Report 05022019 JSON')\n  .addRule('ticker', '$.quote.symbol') \n  .addRule('change_percentage', '$.quote.changePercent') \n  .thenMultiply('100') \n  .thenRoundDown('0') \n  .addRule('close_price', '$.quote.close') \n  .thenAdaptCurrency('USD', false) \n  .addRule('CEO', '$.quote.CEO') \n  .thenSplit(',', '$2 $1');\n</code>",
            "text2": "In this , the CEO name is last name, first name in the source data and in the output\n        it will be transformed to first name last name.",
            "type": "Example",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "Object",
            "order": 10,
            "release": "paris",
            "sectionHeader": "Returns",
            "sectionTitle": null,
            "tableHeader": "Type,Description",
            "text": "Current TransformerRuleList object.",
            "text2": null,
            "type": "Return",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "splitPattern",
            "order": 10,
            "release": "paris",
            "sectionHeader": "Parameters",
            "sectionTitle": null,
            "tableHeader": "Name,Type,Description",
            "text": "String",
            "text2": "String that denotes how to split the text into segments.",
            "type": "Parameter",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "replaceString",
            "order": 20,
            "release": "paris",
            "sectionHeader": "Parameters",
            "sectionTitle": null,
            "tableHeader": "Name,Type,Description",
            "text": "String",
            "text2": "String that defines the output string, including segment references and\n                constants. Not all segments need to be referenced. <p class=\"p\">Reference the segments defined\n                  by the <span class=\"keyword parmname\">splitPattern</span> using $#, where # is the number of the\n                  order of the segment in the source data element. Reference the entire source data\n                  element using $0.</p>",
            "type": "Parameter",
            "variable": null
          }
        ],
        "dc_identifier": "TRL-thenSplit_S_S",
        "hasExample": true,
        "hasParameter": true,
        "hasReturn": true,
        "name": "thenSplit(String splitPattern, String replaceString)",
        "order": 15140,
        "parentId": "TransformerRuleListAPI",
        "parent_permalink": "class_namespace__scoped_transformerrulelist___scoped__global_sn_tfrm__paris",
        "release": "paris",
        "sectionHeader": null,
        "sectionTitle": null,
        "tableHeader": null,
        "text": "Adds an adapter to the current rule that splits, reorganizes, and replaces strings\n    within the source field and saves them in the output field.",
        "text2": "<p>The <span class=\"keyword parmname\">splitPattern</span> parameter denotes how to divide the source text\n        string into segments. This parameter can be a typical word separator such as a space (' '),\n        comma (','), or semicolon (';'), and can also be any string, such as 'name'. For example, if\n        the source text is \"Smith John Michael\" and the <span class=\"keyword parmname\">splitPattern</span> is a\n        space, then the available segments are \"Smith\", \"John\", and \"Michael\". To reference a\n        segment, use $#, where # is the number of the order of the segment in the source text\n        string. For example, if the method call is <code class=\"ph codeph\">thenSplit(' ', '$2 $3 $1')</code>, then\n        the output is \"John Michael Smith\". In addition, you can add constants within the output\n        pattern, such as <code class=\"ph codeph\">thenSplit(' ', 'First name: $2 Middle name: $3 Last name:\n          $1')</code>.</p><p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This is an adapter method and cannot be used on its own. Adapter methods work\n                  in conjunction with the<span class=\"keyword apiname\">addRule()</span> method. They define\n                  adaptations to apply to the output field defined by the\n                    <span class=\"keyword apiname\">addRule()</span> method such as formatting, rounding, and applying\n                  patterns.</div></p>",
        "type": "Method",
        "variable": null
      },
      {
        "children": [
          {
            "children": null,
            "dc_identifier": null,
            "name": "Object",
            "order": 10,
            "release": "paris",
            "sectionHeader": "Returns",
            "sectionTitle": null,
            "tableHeader": "Type,Description",
            "text": "Current TransformerRuleList object.",
            "text2": null,
            "type": "Return",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "operand",
            "order": 10,
            "release": "paris",
            "sectionHeader": "Parameters",
            "sectionTitle": null,
            "tableHeader": "Name,Type,Description",
            "text": "Number",
            "text2": "Value to subtract from the source data element.",
            "type": "Parameter",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "Example",
            "order": 10,
            "release": "paris",
            "sectionHeader": null,
            "sectionTitle": null,
            "tableHeader": null,
            "text": "<code>var transformerRuleList = new sn_tfrm.TransformerRuleList()\n  .fromJSON()\n  .setName('Stock 05182019 JSON')\n  .addRule('ticker', '$.quote.symbol') \n  .addRule('change_percentage', '$.quote.changePercent') \n  .thenMultiply('100') \n  .thenRoundDown('0') \n  .addRule('close_price', '$.quote.close') \n  .thenAdaptCurrency('USD', false) \n  .addRule('trade_price', '$.quote.current_price') \n  .addMultiply('$.quote.trade_quantity')\n  .thenSubtract('$.quote.discount_dollars'); \n</code>",
            "text2": null,
            "type": "Example",
            "variable": null
          }
        ],
        "dc_identifier": "TRL-thenSubtract_N",
        "hasExample": true,
        "hasParameter": true,
        "hasReturn": true,
        "name": "thenSubtract(Number operand)",
        "order": 15150,
        "parentId": "TransformerRuleListAPI",
        "parent_permalink": "class_namespace__scoped_transformerrulelist___scoped__global_sn_tfrm__paris",
        "release": "paris",
        "sectionHeader": null,
        "sectionTitle": null,
        "tableHeader": null,
        "text": "Adds an adapter to the current rule that subtracts the passed in value from the source\n    field and stores it in the output field.",
        "text2": "<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This is an adapter method and cannot be used on its own. Adapter methods work\n                  in conjunction with the<span class=\"keyword apiname\">addRule()</span> method. They define\n                  adaptations to apply to the output field defined by the\n                    <span class=\"keyword apiname\">addRule()</span> method such as formatting, rounding, and applying\n                  patterns.</div></p>",
        "type": "Method",
        "variable": null
      }
    ],
    "dc_identifier": "TransformerRuleListAPI",
    "is_current": true,
    "is_highlighted": true,
    "level": "Class",
    "name": "TransformerRuleList - Scoped, Global",
    "namespace_id": "sn_tfrm-namespace",
    "release": "paris",
    "text": "Enables you to create a list of rules for transforming various types of JSON and XML\n    data into name-value pair output.",
    "text2": "The <span class=\"keyword apiname\">TransformerRuleList</span> API works along with the\n        <span class=\"keyword apiname\">Transformer</span> and <span class=\"keyword apiname\">TransformerDefinition</span> APIs. <span class=\"ph\">Together, these APIs transform XML nodes or\n                any entity in a structured JSON document into an output of name-value pairs.\n                Supported JSON entities including objects and elements within an array, such as\n                strings, numbers, and other arrays.</span><br/><br/><ul class=\"ul\" id=\"TransformerRuleListAPI__ul_odh_ghv_bkb\">\n        <li class=\"li\">\n          <p class=\"p\">The\n                  <span class=\"keyword apiname\">TransformerRuleList</span> API enables you to create transformation\n                rule lists that define what data in the source document to include in the output and\n                how to transform the source data.</p>\n\n        </li>\n\n        <li class=\"li\">\n          <p class=\"p\">The\n                  <span class=\"keyword apiname\">TransformerDefinition</span> API associates a transformation rule list\n                with a JSON/XML record path to define reusable transform definition objects. You can\n                use a transform definition object to transform one or more source documents.</p>\n\n        </li>\n\n        <li class=\"li\">\n          <p class=\"p\">The <span class=\"keyword apiname\">Transformer</span> API performs\n                the actual data transformation, one data entity at a time, using the specified\n                transformation rule list to create the desired output data.</p>\n\n        </li>\n\n      </ul><br/><br/>When you instantiate the <span class=\"keyword apiname\">TransformRuleList</span> object, you must define whether\n      it describes a JSON or XML source document using the <span class=\"keyword apiname\">.fromJSON()</span> or\n        <span class=\"keyword apiname\">.fromXML()</span> methods. For example:<br/><br/><code class=\"ph codeph\">var trl = sn_tfrm.TransformerRuleList().fromJSON();</code> or <code class=\"ph codeph\">var trl =\n        sn_tfrm.TransformerRuleList().fromXML();</code><br/><br/>Then use the <span class=\"keyword apiname\">addRule()</span> method to define a transformation rule for each\n      element in the source document that you want to include as a name-value pair in the\n      output.<br/><br/>Use \"adapter methods\", such as <span class=\"keyword apiname\">setName()</span> or <span class=\"keyword apiname\">thenAdd()</span>,\n      to define how to manipulate data elements when the transformation is performed. Adapter\n      methods work along with the <span class=\"keyword apiname\">addRule()</span> method. They define adaptations to\n      apply to the output field defined by the <span class=\"keyword apiname\">addRule()</span> method such as\n      formatting, rounding, and applying patterns. You can apply one or more adapter methods to each\n      data transformation. Adapter methods enable you to do things such as:<ul class=\"ul\" id=\"TransformerRuleListAPI__ul_nrx_yvv_phb\">\n        <li class=\"li\">Concatenate text.</li>\n\n        <li class=\"li\">Perform mathematical functions, such as add, subtract, divide, and multiply.</li>\n\n        <li class=\"li\">Round values up or down (round up/down, ceiling/floor).</li>\n\n        <li class=\"li\">Define whether to use the minimum or maximum value when comparing a source data element\n          to a specified value.</li>\n\n        <li class=\"li\">Apply a currency code.</li>\n\n        <li class=\"li\">Convert between different units of measure.</li>\n\n        <li class=\"li\">Format data elements.</li>\n\n        <li class=\"li\">Apply patterns.</li>\n\n        <li class=\"li\">Replace specified data elements with a specified value.</li>\n\n        <li class=\"li\">Split and rearrange strings.</li>\n\n      </ul><br/><br/>You can use the <span class=\"keyword apiname\">TransformerRuleList</span> class in both scoped and global server\n      scripts. When using this class, use the <span class=\"keyword parmname\">sn_tfrm</span> namespace identifier.\n      Also, before this API is available in an instance, you must activate the Transformation\n      Service plugin (com.glide.transform).",
    "type": "Server Side Scoped",
    "variable": ""
  }
]