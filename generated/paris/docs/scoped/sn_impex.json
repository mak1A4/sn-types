[
  {
    "children": [
      {
        "children": [
          {
            "children": [
              {
                "children": null,
                "dc_identifier": null,
                "name": "Output",
                "order": 10,
                "release": "paris",
                "sectionHeader": null,
                "sectionTitle": null,
                "tableHeader": null,
                "text": "Joe\nSmith\n1470 W Carmen, Chicago IL, 60640",
                "text2": null,
                "type": "Output",
                "variable": null
              }
            ],
            "dc_identifier": null,
            "name": "Example",
            "order": 10,
            "release": "paris",
            "sectionHeader": null,
            "sectionTitle": null,
            "tableHeader": null,
            "text": "<code>var csvLine = '\\\"Joe\\\",\\\"Smith\\\",\\\"1470 W Carmen, Chicago IL, 60640\\\"';\nvar delimiter = ',';\nvar quoteCharacter = '\"';\n\nvar x = new sn_impex.CSVParser().parseLineToArray(csvLine, delimiter, quoteCharacter);\n\ngs.log(x[0]);\ngs.log(x[1]);\ngs.log(x[2]);\n</code>",
            "text2": "This  shows simple CSV formatted content parsed into a returned array.",
            "type": "Example",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "Array",
            "order": 10,
            "release": "paris",
            "sectionHeader": "Returns",
            "sectionTitle": null,
            "tableHeader": "Type,Description",
            "text": "Array containing the parsed values for each element in the passed-in CSV\n                  content.<p class=\"p\">For\n                example:</p>\n<pre class=\"pre codeblock\"><code>{\nJoe,\nSmith,\n470 W Carmen, Chicago IL, 60640\n}</code></pre>",
            "text2": null,
            "type": "Return",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "csvLine",
            "order": 10,
            "release": "paris",
            "sectionHeader": "Parameters",
            "sectionTitle": null,
            "tableHeader": "Name,Type,Description",
            "text": "String",
            "text2": "CSV content to parse.",
            "type": "Parameter",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "delimiter",
            "order": 20,
            "release": "paris",
            "sectionHeader": "Parameters",
            "sectionTitle": null,
            "tableHeader": "Name,Type,Description",
            "text": "String",
            "text2": "Optional. Character used to delineate the fields in the source CSV\n                  content.<p class=\"p\">Default: Comma ','</p>",
            "type": "Parameter",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "quoteCharacter",
            "order": 30,
            "release": "paris",
            "sectionHeader": "Parameters",
            "sectionTitle": null,
            "tableHeader": "Name,Type,Description",
            "text": "String",
            "text2": "Optional. Character used as the quote character in the source CSV content.\n                  <p class=\"p\">Default: Double quote '\"'</p>",
            "type": "Parameter",
            "variable": null
          }
        ],
        "dc_identifier": "CSVParser-parseLineToArray_S_S_S",
        "hasExample": true,
        "hasOutput": true,
        "hasParameter": true,
        "hasReturn": true,
        "name": "parseLineToArray(String cvsLine, String delimiter, String quoteCharacter)",
        "order": 12000,
        "parentId": "CSVParserScopedAPI",
        "parent_permalink": "class_namespace__scoped_csvparser_sn_impex__paris",
        "release": "paris",
        "sectionHeader": null,
        "sectionTitle": null,
        "tableHeader": null,
        "text": "Parses passed in CSV formatted content into an array.",
        "text2": null,
        "type": "Method",
        "variable": null
      },
      {
        "children": [
          {
            "children": [
              {
                "children": null,
                "dc_identifier": null,
                "name": "Output",
                "order": 10,
                "release": "paris",
                "sectionHeader": null,
                "sectionTitle": null,
                "tableHeader": null,
                "text": "Joe\nSmith\n1470 W Carmen, Chicago IL, 60640",
                "text2": null,
                "type": "Output",
                "variable": null
              }
            ],
            "dc_identifier": null,
            "name": "Example",
            "order": 10,
            "release": "paris",
            "sectionHeader": null,
            "sectionTitle": null,
            "tableHeader": null,
            "text": "<code>var csvLine = '\\\"Joe\\\",\\\"Smith\\\",\\\"1470 W Carmen, Chicago IL, 60640\\\"';\nvar headers = ['first_name', 'last_name', 'address'];\nvar delimiter = ',';\nvar quoteCharacter = '\"';\n\nvar x = new sn_impex.CSVParser().parseLineToObject(csvLine, headers, delimiter, quoteCharacter);\n\ngs.log(x.first_name);\ngs.log(x.last_name);\ngs.log(x.address);\n</code>",
            "text2": "This  shows CSV formatted content parsed into a returned object.",
            "type": "Example",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "Object",
            "order": 10,
            "release": "paris",
            "sectionHeader": "Returns",
            "sectionTitle": null,
            "tableHeader": "Type,Description",
            "text": "Object containing the header and corresponding value for each element in the\n                passed-in CSV content.<p class=\"p\">For\n                example:</p>\n<pre class=\"pre codeblock\"><code>{\nfirst_name: Joe,\nlast_name: Smith,\naddress: 1470 W Carmen, Chicago IL, 60640\n}</code></pre>",
            "text2": null,
            "type": "Return",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "csvLine",
            "order": 10,
            "release": "paris",
            "sectionHeader": "Parameters",
            "sectionTitle": null,
            "tableHeader": "Name,Type,Description",
            "text": "String",
            "text2": "CSV content to parse.",
            "type": "Parameter",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "headers",
            "order": 20,
            "release": "paris",
            "sectionHeader": "Parameters",
            "sectionTitle": null,
            "tableHeader": "Name,Type,Description",
            "text": "Array of Strings",
            "text2": "Headers associated with the CSV content. These headers must be specified in the\n                same order as the corresponding content in <span class=\"keyword parmname\">csvLine</span>. For\n                example, <code class=\"ph codeph\">var headers = ['first_name', 'last_name',\n                'address'];</code>",
            "type": "Parameter",
            "variable": null
          },
          {
            "children": [
              {
                "children": null,
                "dc_identifier": null,
                "name": "Output",
                "order": 10,
                "release": "paris",
                "sectionHeader": null,
                "sectionTitle": null,
                "tableHeader": null,
                "text": "CSVParser: Header list is empty: no thrown error\n*** Script: CSVParser: Header list is empty",
                "text2": null,
                "type": "Output",
                "variable": null
              }
            ],
            "dc_identifier": null,
            "name": "Example",
            "order": 20,
            "release": "paris",
            "sectionHeader": null,
            "sectionTitle": null,
            "tableHeader": null,
            "text": "<code>var csvLine = '\\\"Joe\\\",\\\"Smith\\\",\\\"1470 W Carmen, Chicago IL, 60640\\\"';\nvar headers = null;\nvar delimiter = ',';\nvar quoteCharacter = '\"';\ntry {\nvar x = new sn_impex.CSVParser().parseLineToObject(csvLine, headers, delimiter, quoteCharacter);\n\ngs.log(x.first_name);\ngs.log(x.last_name);\ngs.log(x.address);\n}\ncatch(ex) {\n      gs.info(ex.message);\n}\n</code>",
            "text2": "This  shows an exception response because of an invalid pass of the header\n        parameter.",
            "type": "Example",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "delimiter",
            "order": 30,
            "release": "paris",
            "sectionHeader": "Parameters",
            "sectionTitle": null,
            "tableHeader": "Name,Type,Description",
            "text": "String",
            "text2": "Optional. Character used to delineate the fields in the source CSV\n                  content.<p class=\"p\">Default: Comma ','</p>",
            "type": "Parameter",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "quoteCharacter",
            "order": 40,
            "release": "paris",
            "sectionHeader": "Parameters",
            "sectionTitle": null,
            "tableHeader": "Name,Type,Description",
            "text": "String",
            "text2": "Optional. Character used as the quote character in the source CSV content.\n                  <p class=\"p\">Default: Double quote '\"'</p>",
            "type": "Parameter",
            "variable": null
          }
        ],
        "dc_identifier": "CSVParser-parseLineToObject_S_A_S_S",
        "hasExample": true,
        "hasOutput": true,
        "hasParameter": true,
        "hasReturn": true,
        "name": "parseLineToObject(String cvsLine, Array headers, String delimiter, String quoteCharacter)",
        "order": 12010,
        "parentId": "CSVParserScopedAPI",
        "parent_permalink": "class_namespace__scoped_csvparser_sn_impex__paris",
        "release": "paris",
        "sectionHeader": null,
        "sectionTitle": null,
        "tableHeader": null,
        "text": "Parses passed in CSV formatted content into an object.",
        "text2": null,
        "type": "Method",
        "variable": null
      }
    ],
    "dc_identifier": "CSVParserScopedAPI",
    "is_current": true,
    "is_highlighted": true,
    "level": "Class",
    "name": "CSVParser",
    "namespace_id": "sn_impex-namespace",
    "release": "paris",
    "text": "This API provides methods for parsing comma-separated value (CSV) formatted records\n    into an object or an array.",
    "text2": "The <span class=\"keyword apiname\">CSVParser</span> API is in the <span class=\"keyword parmname\">sn_impex</span> namespace.",
    "type": "Server Side Scoped",
    "variable": ""
  },
  {
    "children": [
      {
        "children": [
          {
            "children": null,
            "dc_identifier": null,
            "name": "Example",
            "order": 10,
            "release": "paris",
            "sectionHeader": null,
            "sectionTitle": null,
            "tableHeader": null,
            "text": "<code>var parser = new sn_impex.GlideExcelParser(); \nvar attachment = new GlideSysAttachment();\n// use attachment sys id of an excel file\nvar attachmentStream = attachment.getContentStream(&lt;attachment sys id&gt;);\n\nparser.parse(attachmentStream); \n\n//retrieve the column headers\nvar headers = parser.getColumnHeaders();  \nvar header1 = headers[0]; \nvar header2 = headers[1]; \n\n//print headers\ngs.info(header1 + \" \" + header2); \n\nwhile(parser.next()) { \n  var row = parser.getRow(); \n  //print row value for both columns   \n  gs.info(row[header1] + ' ' + row[header2]) \n}</code>",
            "text2": null,
            "type": "Example",
            "variable": null
          }
        ],
        "dc_identifier": "GEPS-GlideExcelParser",
        "hasExample": true,
        "name": "GlideExcelParser()",
        "order": 2090,
        "parentId": "GlideExcelParserScopedAPI",
        "parent_permalink": "class_namespace__scoped_glideexcelparser___scoped__global_sn_impex__paris",
        "release": "paris",
        "sectionHeader": null,
        "sectionTitle": null,
        "tableHeader": null,
        "text": "Creates an instance of GlideExcelParser.",
        "text2": "<p>The API name space identifier \"sn_impex\" must be used when creating a GlideExcelParser\n        object.</p>",
        "type": "Constructor",
        "variable": null
      },
      {
        "children": [
          {
            "children": null,
            "dc_identifier": null,
            "name": "void",
            "order": 10,
            "release": "paris",
            "sectionHeader": "Returns",
            "sectionTitle": null,
            "tableHeader": "Type,Description",
            "text": "Method does not return a value",
            "text2": null,
            "type": "Return",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "Example",
            "order": 10,
            "release": "paris",
            "sectionHeader": null,
            "sectionTitle": null,
            "tableHeader": null,
            "text": "<code>// iterate over each row in the excel sheet\nvar attachment = new GlideSysAttachment();\nvar attachmentStream = attachment.getContentStream(&lt;attachment sys id&gt;);\nvar parser = new sn_impex.GlideExcelParser();\nparser.parse(attachmentStream);\nwhile (parser.next()) {\n  // do something on each row\n  var row = parser.getRow();\n  gs.info(JSON.stringify(row));\n}\nparser.close(); // close the stream and release the document</code>",
            "text2": "This  shows how to close the parser once all document management is complete.",
            "type": "Example",
            "variable": null
          }
        ],
        "dc_identifier": "GEPS-close",
        "hasExample": true,
        "hasReturn": true,
        "name": "close()",
        "order": 4030,
        "parentId": "GlideExcelParserScopedAPI",
        "parent_permalink": "class_namespace__scoped_glideexcelparser___scoped__global_sn_impex__paris",
        "release": "paris",
        "sectionHeader": null,
        "sectionTitle": null,
        "tableHeader": null,
        "text": "Close the connection to the input stream and release the document.",
        "text2": null,
        "type": "Method",
        "variable": null
      },
      {
        "children": [
          {
            "children": [
              {
                "children": null,
                "dc_identifier": null,
                "name": "Output",
                "order": 10,
                "release": "paris",
                "sectionHeader": null,
                "sectionTitle": null,
                "tableHeader": null,
                "text": "*** Script:  Sheet Names Incident Table, sys_user Table, knowledge Table\n*** Script: **************************************************************************************\n*** Script: Sheet name:    Incident Table\n*** Script: Number\t||Opened\t||Short description\n*** Script: INC0010112\t|| 2019-07-29 11:48:43\t||Assessment :  ATF Assessor\n*** Script: INC0010111\t|| 2019-07-22 14:04:57\t||ATF : Test1\n*** Script: INC0009009\t|| 2018-08-30 01:06:16\t||Unable to access the shared folder.\n*** Script: **************************************************************************************\n*** Script: Sheet name:    sys_user Table\n*** Script: User ID\t||Name\t||Email\n*** Script: abel.tuter\t|| Abel Tuter\t||abel.tuter@example.com\n*** Script: abraham.lincoln\t|| Abraham Lincoln\t||abraham.lincoln@example.com\n*** Script: adela.cervantsz\t|| Adela Cervantsz\t||adela.cervantsz@example.com\n*** Script: aileen.mottern\t|| Aileen Mottern\t||aileen.mottern@example.com\n*** Script: alejandra.prenatt\t|| Alejandra Prenatt\t||alejandra.prenatt@example.com\n*** Script: **************************************************************************************\n*** Script: Sheet name:    knowledge Table\n*** Script: Number\t||Short description\t||Author\n*** Script: KB99999999\t|| Microsoft Outlook Issues\t||System Administrator\n*** Script: KB0000033\t|| Eclipse configuration for Android development\t||System Administrator\n*** Script: KB0000032\t|| Getting Around in Windows\t||System Administrator\n*** Script: KB0000031\t|| How can I find the MAC address of my Ethernet or\n   wireless interface?\t||Sam Sorokin",
                "text2": null,
                "type": "Output",
                "variable": null
              }
            ],
            "dc_identifier": null,
            "name": "Example",
            "order": 10,
            "release": "paris",
            "sectionHeader": null,
            "sectionTitle": null,
            "tableHeader": null,
            "text": "<code>var parser = new sn_impex.GlideExcelParser();\n\nvar attachment = new GlideSysAttachment();\n\n// Use the attachment sys_id of an Excel file\nvar attachmentStream = attachment.getContentStream(\"&lt;attachment_sys_id&gt;\");\n\n// Set the source to be parsed\nparser.setSource(attachmentStream);\n\n// Get the worksheet names to be parsed in the Excel document\nvar list_sheet_name = parser.getSheetNames();\n\ngs.info(\" Sheet Names \" + list_sheet_name.join(\", \"));\n\n// Iterate over each worksheet in the Excel workbook\nfor (var i = 0; i &lt; list_sheet_name.length; i++) {\n    gs.info(\"**************************************************************************************\");\n    gs.info(\"Sheet name:    \" + list_sheet_name[i]);\n\n// Set the worksheet name to be parsed\n    parser.setSheetName(list_sheet_name[i]);\n\n// Parse each worksheet set using setSheetName()\n    if (parser.parse()) {\n        //retrieve the column headers\n        var headers = parser.getColumnHeaders();\n        var header1 = headers[0];\n        var header2 = headers[1];\n        var header3 = headers[2];\n\n        //print headers\n        gs.info(header1 + \"\\t||\" + header2 + \"\\t||\" + header3);\n\n        // Iterate over each row in the worksheet\n        while (parser.next()) {\n            var row = parser.getRow();\n            //print row value for both columns   \n            gs.info(row[header1] + '\\t|| ' + row[header2] + '\\t||' + row[header3])\n        }\n    } else\n        gs.info(parser.getErrorMessage());\n}</code>",
            "text2": "The following  shows how to parse an Excel file attachment multiple times to\n        retrieve column headers and print values of each row for each worksheet. Results display\n        column headers and values of three separate sheets in the Excel attachment.",
            "type": "Example",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "Array",
            "order": 10,
            "release": "paris",
            "sectionHeader": "Returns",
            "sectionTitle": null,
            "tableHeader": "Type,Description",
            "text": "An array of strings of column headers from the parsed document.",
            "text2": null,
            "type": "Return",
            "variable": null
          }
        ],
        "dc_identifier": "GEPS-getColumnHeaders",
        "hasExample": true,
        "hasOutput": true,
        "hasReturn": true,
        "name": "getColumnHeaders()",
        "order": 6050,
        "parentId": "GlideExcelParserScopedAPI",
        "parent_permalink": "class_namespace__scoped_glideexcelparser___scoped__global_sn_impex__paris",
        "release": "paris",
        "sectionHeader": null,
        "sectionTitle": null,
        "tableHeader": null,
        "text": "Returns a list of column headers from the parsed document.",
        "text2": null,
        "type": "Method",
        "variable": null
      },
      {
        "children": [
          {
            "children": null,
            "dc_identifier": null,
            "name": "String",
            "order": 10,
            "release": "paris",
            "sectionHeader": "Returns",
            "sectionTitle": null,
            "tableHeader": "Type,Description",
            "text": "The error message.",
            "text2": null,
            "type": "Return",
            "variable": null
          }
        ],
        "dc_identifier": "GEPS-getErrorMessage",
        "hasReturn": true,
        "name": "getErrorMessage()",
        "order": 7140,
        "parentId": "GlideExcelParserScopedAPI",
        "parent_permalink": "class_namespace__scoped_glideexcelparser___scoped__global_sn_impex__paris",
        "release": "paris",
        "sectionHeader": null,
        "sectionTitle": null,
        "tableHeader": null,
        "text": "Returns the error message when the <span class=\"keyword apiname\">parse()</span> method fails.",
        "text2": null,
        "type": "Method",
        "variable": null
      },
      {
        "children": [
          {
            "children": null,
            "dc_identifier": null,
            "name": "Object",
            "order": 10,
            "release": "paris",
            "sectionHeader": "Returns",
            "sectionTitle": null,
            "tableHeader": "Type,Description",
            "text": "The row headers are property names and the row values are property\n                values.",
            "text2": null,
            "type": "Return",
            "variable": null
          },
          {
            "children": [
              {
                "children": null,
                "dc_identifier": null,
                "name": "Output",
                "order": 10,
                "release": "paris",
                "sectionHeader": null,
                "sectionTitle": null,
                "tableHeader": null,
                "text": "*** Script:  Sheet Names Incident Table, sys_user Table, knowledge Table\n*** Script: **************************************************************************************\n*** Script: Sheet name:    Incident Table\n*** Script: Number\t||Opened\t||Short description\n*** Script: INC0010112\t|| 2019-07-29 11:48:43\t||Assessment :  ATF Assessor\n*** Script: INC0010111\t|| 2019-07-22 14:04:57\t||ATF : Test1\n*** Script: INC0009009\t|| 2018-08-30 01:06:16\t||Unable to access the shared folder.\n*** Script: **************************************************************************************\n*** Script: Sheet name:    sys_user Table\n*** Script: User ID\t||Name\t||Email\n*** Script: abel.tuter\t|| Abel Tuter\t||abel.tuter@example.com\n*** Script: abraham.lincoln\t|| Abraham Lincoln\t||abraham.lincoln@example.com\n*** Script: adela.cervantsz\t|| Adela Cervantsz\t||adela.cervantsz@example.com\n*** Script: aileen.mottern\t|| Aileen Mottern\t||aileen.mottern@example.com\n*** Script: alejandra.prenatt\t|| Alejandra Prenatt\t||alejandra.prenatt@example.com\n*** Script: **************************************************************************************\n*** Script: Sheet name:    knowledge Table\n*** Script: Number\t||Short description\t||Author\n*** Script: KB99999999\t|| Microsoft Outlook Issues\t||System Administrator\n*** Script: KB0000033\t|| Eclipse configuration for Android development\t||System Administrator\n*** Script: KB0000032\t|| Getting Around in Windows\t||System Administrator\n*** Script: KB0000031\t|| How can I find the MAC address of my Ethernet or\n   wireless interface?\t||Sam Sorokin",
                "text2": null,
                "type": "Output",
                "variable": null
              }
            ],
            "dc_identifier": null,
            "name": "Example",
            "order": 10,
            "release": "paris",
            "sectionHeader": null,
            "sectionTitle": null,
            "tableHeader": null,
            "text": "<code>var parser = new sn_impex.GlideExcelParser();\n\nvar attachment = new GlideSysAttachment();\n\n// Use the attachment sys_id of an Excel file\nvar attachmentStream = attachment.getContentStream(\"&lt;attachment_sys_id&gt;\");\n\n// Set the source to be parsed\nparser.setSource(attachmentStream);\n\n// Get the worksheet names to be parsed in the Excel document\nvar list_sheet_name = parser.getSheetNames();\n\ngs.info(\" Sheet Names \" + list_sheet_name.join(\", \"));\n\n// Iterate over each worksheet in the Excel workbook\nfor (var i = 0; i &lt; list_sheet_name.length; i++) {\n    gs.info(\"**************************************************************************************\");\n    gs.info(\"Sheet name:    \" + list_sheet_name[i]);\n\n// Set the worksheet name to be parsed\n    parser.setSheetName(list_sheet_name[i]);\n\n// Parse each worksheet set using setSheetName()\n    if (parser.parse()) {\n        //retrieve the column headers\n        var headers = parser.getColumnHeaders();\n        var header1 = headers[0];\n        var header2 = headers[1];\n        var header3 = headers[2];\n\n        //print headers\n        gs.info(header1 + \"\\t||\" + header2 + \"\\t||\" + header3);\n\n        // Iterate over each row in the worksheet\n        while (parser.next()) {\n            var row = parser.getRow();\n            //print row value for both columns   \n            gs.info(row[header1] + '\\t|| ' + row[header2] + '\\t||' + row[header3])\n        }\n    } else\n        gs.info(parser.getErrorMessage());\n}</code>",
            "text2": "The following  shows how to parse an Excel file attachment multiple times to\n        retrieve column headers and print values of each row for each worksheet. Results display\n        column headers and values of three separate sheets in the Excel attachment.",
            "type": "Example",
            "variable": null
          }
        ],
        "dc_identifier": "GEPS-getRow",
        "hasExample": true,
        "hasOutput": true,
        "hasReturn": true,
        "name": "getRow()",
        "order": 9160,
        "parentId": "GlideExcelParserScopedAPI",
        "parent_permalink": "class_namespace__scoped_glideexcelparser___scoped__global_sn_impex__paris",
        "release": "paris",
        "sectionHeader": null,
        "sectionTitle": null,
        "tableHeader": null,
        "text": "Get the current row values and headers.",
        "text2": null,
        "type": "Method",
        "variable": null
      },
      {
        "children": [
          {
            "children": [
              {
                "children": null,
                "dc_identifier": null,
                "name": "Output",
                "order": 10,
                "release": "paris",
                "sectionHeader": null,
                "sectionTitle": null,
                "tableHeader": null,
                "text": "ProgressWorker: Attempted to get non-existent sys_progress_\nworker record, inserted 81b0ca5ddb59730090c9ff9dbf9619c4\nsn_appcreator: Column Name : My Number Col, Type : integer,\n Max Length : 1\nsn_appcreator: Column Name : My String Col, Type : string, \n Max Length : 650\nsn_appcreator: Column Name : My Date Col, Type : glide_date,\n Max Length : 6\nsn_appcreator: Column Name : My DateTime Col, Type : \n glide_date_time, Max Length : 7\nsn_appcreator: Column Name : My Percent Col, Type : decimal,\n Max Length : 6\nsn_appcreator: Column Name : My Phone Col, Type : string, \n Max Length : 12\nsn_appcreator: Column Name : My Fraction Col, Type : decimal,\n Max Length : 3",
                "text2": null,
                "type": "Output",
                "variable": null
              }
            ],
            "dc_identifier": null,
            "name": "Example",
            "order": 10,
            "release": "paris",
            "sectionHeader": null,
            "sectionTitle": null,
            "tableHeader": null,
            "text": "<code>var attachmentSysId = \"&lt;sys_id&gt;\";\nvar headerRowNumber = 6;\n\nvar attachmentStream = new GlideSysAttachment().getContentStream(attachmentSysId);\nvar parser = new sn_impex.GlideExcelParser();\nparser.setHeaderRowNumber(headerRowNumber);\nif (!parser.parse(attachmentStream)) {\n    throw \"Attachment could not be parsed as an Excel Spreadsheet \" + attachmentSysId;\n}\nvar tableInfo = parser.getTableInfo();\nfor (var name in tableInfo) {\ngs.info('Column Name : ' + name + ', Type : ' + tableInfo[name].getType() + ', Max Length : ' + tableInfo[name].getLength());\n}</code>",
            "text2": "This  shows how to data from a 7-column spreadsheet attachment including row data\n        such as 1, Meghan, 1/1/85, 1:00 AM, 10.00%, 224-432-8582, ½.",
            "type": "Example",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "Object",
            "order": 10,
            "release": "paris",
            "sectionHeader": "Returns",
            "sectionTitle": null,
            "tableHeader": "Type,Description",
            "text": "Returns attachment data as a map in which the key is column name. Values\n                contain column type and maximum length of a character string in the column. Access\n                return values using the <span class=\"keyword apiname\">getType()</span> and\n                  <span class=\"keyword apiname\">getLength()</span> methods.",
            "text2": null,
            "type": "Return",
            "variable": null
          }
        ],
        "dc_identifier": "GEPS-getTableInfo",
        "hasExample": true,
        "hasOutput": true,
        "hasReturn": true,
        "name": "getTableInfo()",
        "order": 9640,
        "parentId": "GlideExcelParserScopedAPI",
        "parent_permalink": "class_namespace__scoped_glideexcelparser___scoped__global_sn_impex__paris",
        "release": "paris",
        "sectionHeader": null,
        "sectionTitle": null,
        "tableHeader": null,
        "text": "Gets table column types and max character length from a spreadsheet or CSV\n    attachment.",
        "text2": "<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This method is restricted to scoped applications.</div></p>",
        "type": "Method",
        "variable": null
      },
      {
        "children": [
          {
            "children": [
              {
                "children": null,
                "dc_identifier": null,
                "name": "Output",
                "order": 10,
                "release": "paris",
                "sectionHeader": null,
                "sectionTitle": null,
                "tableHeader": null,
                "text": "*** Script:  Sheet Names Incident Table, sys_user Table, knowledge Table\n*** Script: **************************************************************************************\n*** Script: Sheet name:    Incident Table\n*** Script: Number\t||Opened\t||Short description\n*** Script: INC0010112\t|| 2019-07-29 11:48:43\t||Assessment :  ATF Assessor\n*** Script: INC0010111\t|| 2019-07-22 14:04:57\t||ATF : Test1\n*** Script: INC0009009\t|| 2018-08-30 01:06:16\t||Unable to access the shared folder.\n*** Script: **************************************************************************************\n*** Script: Sheet name:    sys_user Table\n*** Script: User ID\t||Name\t||Email\n*** Script: abel.tuter\t|| Abel Tuter\t||abel.tuter@example.com\n*** Script: abraham.lincoln\t|| Abraham Lincoln\t||abraham.lincoln@example.com\n*** Script: adela.cervantsz\t|| Adela Cervantsz\t||adela.cervantsz@example.com\n*** Script: aileen.mottern\t|| Aileen Mottern\t||aileen.mottern@example.com\n*** Script: alejandra.prenatt\t|| Alejandra Prenatt\t||alejandra.prenatt@example.com\n*** Script: **************************************************************************************\n*** Script: Sheet name:    knowledge Table\n*** Script: Number\t||Short description\t||Author\n*** Script: KB99999999\t|| Microsoft Outlook Issues\t||System Administrator\n*** Script: KB0000033\t|| Eclipse configuration for Android development\t||System Administrator\n*** Script: KB0000032\t|| Getting Around in Windows\t||System Administrator\n*** Script: KB0000031\t|| How can I find the MAC address of my Ethernet or\n   wireless interface?\t||Sam Sorokin",
                "text2": null,
                "type": "Output",
                "variable": null
              }
            ],
            "dc_identifier": null,
            "name": "Example",
            "order": 10,
            "release": "paris",
            "sectionHeader": null,
            "sectionTitle": null,
            "tableHeader": null,
            "text": "<code>var parser = new sn_impex.GlideExcelParser();\n\nvar attachment = new GlideSysAttachment();\n\n// Use the attachment sys_id of an Excel file\nvar attachmentStream = attachment.getContentStream(\"&lt;attachment_sys_id&gt;\");\n\n// Set the source to be parsed\nparser.setSource(attachmentStream);\n\n// Get the worksheet names to be parsed in the Excel document\nvar list_sheet_name = parser.getSheetNames();\n\ngs.info(\" Sheet Names \" + list_sheet_name.join(\", \"));\n\n// Iterate over each worksheet in the Excel workbook\nfor (var i = 0; i &lt; list_sheet_name.length; i++) {\n    gs.info(\"**************************************************************************************\");\n    gs.info(\"Sheet name:    \" + list_sheet_name[i]);\n\n// Set the worksheet name to be parsed\n    parser.setSheetName(list_sheet_name[i]);\n\n// Parse each worksheet set using setSheetName()\n    if (parser.parse()) {\n        //retrieve the column headers\n        var headers = parser.getColumnHeaders();\n        var header1 = headers[0];\n        var header2 = headers[1];\n        var header3 = headers[2];\n\n        //print headers\n        gs.info(header1 + \"\\t||\" + header2 + \"\\t||\" + header3);\n\n        // Iterate over each row in the worksheet\n        while (parser.next()) {\n            var row = parser.getRow();\n            //print row value for both columns   \n            gs.info(row[header1] + '\\t|| ' + row[header2] + '\\t||' + row[header3])\n        }\n    } else\n        gs.info(parser.getErrorMessage());\n}</code>",
            "text2": "The following  shows how to parse an Excel file attachment multiple times to\n        retrieve column headers and print values of each row for each worksheet. Results display\n        column headers and values of three separate sheets in the Excel attachment.",
            "type": "Example",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "Boolean",
            "order": 10,
            "release": "paris",
            "sectionHeader": "Returns",
            "sectionTitle": null,
            "tableHeader": "Type,Description",
            "text": "Returns true if there is a next row, otherwise, returns false.",
            "text2": null,
            "type": "Return",
            "variable": null
          }
        ],
        "dc_identifier": "GEPS-next",
        "hasExample": true,
        "hasOutput": true,
        "hasReturn": true,
        "name": "next()",
        "order": 11690,
        "parentId": "GlideExcelParserScopedAPI",
        "parent_permalink": "class_namespace__scoped_glideexcelparser___scoped__global_sn_impex__paris",
        "release": "paris",
        "sectionHeader": null,
        "sectionTitle": null,
        "tableHeader": null,
        "text": "Moves to the next row.",
        "text2": null,
        "type": "Method",
        "variable": null
      },
      {
        "children": [
          {
            "children": null,
            "dc_identifier": null,
            "name": "inputStream",
            "order": 10,
            "release": "paris",
            "sectionHeader": "Parameters",
            "sectionTitle": null,
            "tableHeader": "Name,Type,Description",
            "text": "GlideScriptableInputStream",
            "text2": "The Excel document to be parsed.",
            "type": "Parameter",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "Example",
            "order": 10,
            "release": "paris",
            "sectionHeader": null,
            "sectionTitle": null,
            "tableHeader": null,
            "text": "<code>var parser = new sn_impex.GlideExcelParser();\nparser.parse(request.body.dataStream); </code>",
            "text2": " from a scripted REST API script where the Excel file is sent in the request\n        payload.",
            "type": "Example",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "Boolean",
            "order": 10,
            "release": "paris",
            "sectionHeader": "Returns",
            "sectionTitle": null,
            "tableHeader": "Type,Description",
            "text": "Returns true if the parse was successful, otherwise, returns false.",
            "text2": null,
            "type": "Return",
            "variable": null
          }
        ],
        "dc_identifier": "GEPS-parse_GSIS",
        "hasExample": true,
        "hasParameter": true,
        "hasReturn": true,
        "name": "parse(GlideScriptableInputStream inputStream)",
        "order": 11970,
        "parentId": "GlideExcelParserScopedAPI",
        "parent_permalink": "class_namespace__scoped_glideexcelparser___scoped__global_sn_impex__paris",
        "release": "paris",
        "sectionHeader": null,
        "sectionTitle": null,
        "tableHeader": null,
        "text": "Parse an XLSX formatted Excel document.",
        "text2": null,
        "type": "Method",
        "variable": null
      },
      {
        "children": [
          {
            "children": null,
            "dc_identifier": null,
            "name": "void",
            "order": 10,
            "release": "paris",
            "sectionHeader": "Returns",
            "sectionTitle": null,
            "tableHeader": "Type,Description",
            "text": "Method does not return a value",
            "text2": null,
            "type": "Return",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "headerRowNumber",
            "order": 10,
            "release": "paris",
            "sectionHeader": "Parameters",
            "sectionTitle": null,
            "tableHeader": "Name,Type,Description",
            "text": "Number",
            "text2": "The header row to be retrieved.",
            "type": "Parameter",
            "variable": null
          }
        ],
        "dc_identifier": "GEPS-setHeaderRowNumber_N",
        "hasParameter": true,
        "hasReturn": true,
        "name": "setHeaderRowNumber(Number headerRowNumber)",
        "order": 13300,
        "parentId": "GlideExcelParserScopedAPI",
        "parent_permalink": "class_namespace__scoped_glideexcelparser___scoped__global_sn_impex__paris",
        "release": "paris",
        "sectionHeader": null,
        "sectionTitle": null,
        "tableHeader": null,
        "text": "Set the number of the header row to be retrieved.",
        "text2": null,
        "type": "Method",
        "variable": null
      },
      {
        "children": [
          {
            "children": null,
            "dc_identifier": null,
            "name": "empty",
            "order": 10,
            "release": "paris",
            "sectionHeader": "Parameters",
            "sectionTitle": null,
            "tableHeader": "Name,Type,Description",
            "text": "Boolean",
            "text2": "When true, cells that are not present return an empty value. When false, cells\n                that are not present return null.",
            "type": "Parameter",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "void",
            "order": 10,
            "release": "paris",
            "sectionHeader": "Returns",
            "sectionTitle": null,
            "tableHeader": "Type,Description",
            "text": "Method does not return a value",
            "text2": null,
            "type": "Return",
            "variable": null
          }
        ],
        "dc_identifier": "GEPS-setNullToEmpty_B",
        "hasParameter": true,
        "hasReturn": true,
        "name": "setNullToEmpty(Boolean empty)",
        "order": 13760,
        "parentId": "GlideExcelParserScopedAPI",
        "parent_permalink": "class_namespace__scoped_glideexcelparser___scoped__global_sn_impex__paris",
        "release": "paris",
        "sectionHeader": null,
        "sectionTitle": null,
        "tableHeader": null,
        "text": "Return an empty value instead of null when an Excel cell is not present.",
        "text2": null,
        "type": "Method",
        "variable": null
      },
      {
        "children": [
          {
            "children": null,
            "dc_identifier": null,
            "name": "void",
            "order": 10,
            "release": "paris",
            "sectionHeader": "Returns",
            "sectionTitle": null,
            "tableHeader": "Type,Description",
            "text": "Method does not return a value",
            "text2": null,
            "type": "Return",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "sheetName",
            "order": 10,
            "release": "paris",
            "sectionHeader": "Parameters",
            "sectionTitle": null,
            "tableHeader": "Name,Type,Description",
            "text": "String",
            "text2": "The name of the sheet to be retrieved.",
            "type": "Parameter",
            "variable": null
          },
          {
            "children": [
              {
                "children": null,
                "dc_identifier": null,
                "name": "Output",
                "order": 10,
                "release": "paris",
                "sectionHeader": null,
                "sectionTitle": null,
                "tableHeader": null,
                "text": "*** Script:  Sheet Names Incident Table, sys_user Table, knowledge Table\n*** Script: **************************************************************************************\n*** Script: Sheet name:    Incident Table\n*** Script: Number\t||Opened\t||Short description\n*** Script: INC0010112\t|| 2019-07-29 11:48:43\t||Assessment :  ATF Assessor\n*** Script: INC0010111\t|| 2019-07-22 14:04:57\t||ATF : Test1\n*** Script: INC0009009\t|| 2018-08-30 01:06:16\t||Unable to access the shared folder.\n*** Script: **************************************************************************************\n*** Script: Sheet name:    sys_user Table\n*** Script: User ID\t||Name\t||Email\n*** Script: abel.tuter\t|| Abel Tuter\t||abel.tuter@example.com\n*** Script: abraham.lincoln\t|| Abraham Lincoln\t||abraham.lincoln@example.com\n*** Script: adela.cervantsz\t|| Adela Cervantsz\t||adela.cervantsz@example.com\n*** Script: aileen.mottern\t|| Aileen Mottern\t||aileen.mottern@example.com\n*** Script: alejandra.prenatt\t|| Alejandra Prenatt\t||alejandra.prenatt@example.com\n*** Script: **************************************************************************************\n*** Script: Sheet name:    knowledge Table\n*** Script: Number\t||Short description\t||Author\n*** Script: KB99999999\t|| Microsoft Outlook Issues\t||System Administrator\n*** Script: KB0000033\t|| Eclipse configuration for Android development\t||System Administrator\n*** Script: KB0000032\t|| Getting Around in Windows\t||System Administrator\n*** Script: KB0000031\t|| How can I find the MAC address of my Ethernet or\n   wireless interface?\t||Sam Sorokin",
                "text2": null,
                "type": "Output",
                "variable": null
              }
            ],
            "dc_identifier": null,
            "name": "Example",
            "order": 10,
            "release": "paris",
            "sectionHeader": null,
            "sectionTitle": null,
            "tableHeader": null,
            "text": "<code>var parser = new sn_impex.GlideExcelParser();\n\nvar attachment = new GlideSysAttachment();\n\n// Use the attachment sys_id of an Excel file\nvar attachmentStream = attachment.getContentStream(\"&lt;attachment_sys_id&gt;\");\n\n// Set the source to be parsed\nparser.setSource(attachmentStream);\n\n// Get the worksheet names to be parsed in the Excel document\nvar list_sheet_name = parser.getSheetNames();\n\ngs.info(\" Sheet Names \" + list_sheet_name.join(\", \"));\n\n// Iterate over each worksheet in the Excel workbook\nfor (var i = 0; i &lt; list_sheet_name.length; i++) {\n    gs.info(\"**************************************************************************************\");\n    gs.info(\"Sheet name:    \" + list_sheet_name[i]);\n\n// Set the worksheet name to be parsed\n    parser.setSheetName(list_sheet_name[i]);\n\n// Parse each worksheet set using setSheetName()\n    if (parser.parse()) {\n        //retrieve the column headers\n        var headers = parser.getColumnHeaders();\n        var header1 = headers[0];\n        var header2 = headers[1];\n        var header3 = headers[2];\n\n        //print headers\n        gs.info(header1 + \"\\t||\" + header2 + \"\\t||\" + header3);\n\n        // Iterate over each row in the worksheet\n        while (parser.next()) {\n            var row = parser.getRow();\n            //print row value for both columns   \n            gs.info(row[header1] + '\\t|| ' + row[header2] + '\\t||' + row[header3])\n        }\n    } else\n        gs.info(parser.getErrorMessage());\n}</code>",
            "text2": "The following  shows how to parse an Excel file attachment multiple times to\n        retrieve column headers and print values of each row for each worksheet. Results display\n        column headers and values of three separate sheets in the Excel attachment.",
            "type": "Example",
            "variable": null
          }
        ],
        "dc_identifier": "GEPS-setSheetName_S",
        "hasExample": true,
        "hasOutput": true,
        "hasParameter": true,
        "hasReturn": true,
        "name": "setSheetName(String sheetName)",
        "order": 14100,
        "parentId": "GlideExcelParserScopedAPI",
        "parent_permalink": "class_namespace__scoped_glideexcelparser___scoped__global_sn_impex__paris",
        "release": "paris",
        "sectionHeader": null,
        "sectionTitle": null,
        "tableHeader": null,
        "text": "Set the name of the sheet to be retrieved.",
        "text2": "<p>If both <span class=\"keyword apiname\">setSheetNumber()</span> and <span class=\"keyword apiname\">setSheetName()</span> are set,\n          <span class=\"keyword apiname\">setSheetName()</span> is used.</p>",
        "type": "Method",
        "variable": null
      },
      {
        "children": [
          {
            "children": null,
            "dc_identifier": null,
            "name": "sheetNumber",
            "order": 10,
            "release": "paris",
            "sectionHeader": "Parameters",
            "sectionTitle": null,
            "tableHeader": "Name,Type,Description",
            "text": "Number",
            "text2": "The Excel sheet number to retrieve.",
            "type": "Parameter",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "void",
            "order": 10,
            "release": "paris",
            "sectionHeader": "Returns",
            "sectionTitle": null,
            "tableHeader": "Type,Description",
            "text": "Method does not return a value",
            "text2": null,
            "type": "Return",
            "variable": null
          },
          {
            "children": [
              {
                "children": null,
                "dc_identifier": null,
                "name": "Output",
                "order": 10,
                "release": "paris",
                "sectionHeader": null,
                "sectionTitle": null,
                "tableHeader": null,
                "text": "Header 1 value = sys_id\nHeader 2 value = email\nHeader 3 value = undefined",
                "text2": null,
                "type": "Output",
                "variable": null
              }
            ],
            "dc_identifier": null,
            "name": "Example",
            "order": 10,
            "release": "paris",
            "sectionHeader": null,
            "sectionTitle": null,
            "tableHeader": null,
            "text": "<code>var parser = new sn_impex.GlideExcelParser(); \nvar attachment = new GlideSysAttachment();\n\n// Use the sys id of an Excel file in the sys_attachment table and copy the sys_id of attachment.\nvar attachmentStream = attachment.getContentStream('178e0511138b6300026e32228144b04e');\n\n// Specify the sheet Number to be read, 0 denotes sheet 1, 1 denotes sheet 2, etc.\nparser.setSheetNumber(\"0\");   \n\nparser.parse(attachmentStream);\n\n// retrieve the column headers (tests if on the correct sheet)\nvar headers = parser.getColumnHeaders();\nvar header1 = headers[0];\nvar header2 = headers[1];\nvar header3 = headers[2];\n\n// print headers\ngs.info('Header 1 value = ' +header1);\ngs.info('Header 2 value = ' +header2);\ngs.info('Header 3 value = ' +header3);</code>",
            "text2": "The following  shows how to use this method to specify the sheet number of an\n        attached spreadsheet workbook to be read.",
            "type": "Example",
            "variable": null
          }
        ],
        "dc_identifier": "GEPS-setSheetNumber_N",
        "hasExample": true,
        "hasOutput": true,
        "hasParameter": true,
        "hasReturn": true,
        "name": "setSheetNumber(Number sheetNumber)",
        "order": 14110,
        "parentId": "GlideExcelParserScopedAPI",
        "parent_permalink": "class_namespace__scoped_glideexcelparser___scoped__global_sn_impex__paris",
        "release": "paris",
        "sectionHeader": null,
        "sectionTitle": null,
        "tableHeader": null,
        "text": "Set the number of the Excel sheet to be retrieved.",
        "text2": "<p>If both <span class=\"keyword apiname\">setSheetNumber()</span> and <span class=\"keyword apiname\">setSheetName()</span> are set,\n          <span class=\"keyword apiname\">setSheetNumber()</span> is ignored.</p>",
        "type": "Method",
        "variable": null
      }
    ],
    "dc_identifier": "GlideExcelParserScopedAPI",
    "is_current": true,
    "is_highlighted": true,
    "level": "Class",
    "name": "GlideExcelParser - Scoped, Global",
    "namespace_id": "sn_impex-namespace",
    "release": "paris",
    "text": "Parse .xlsx formatted Excel files and access file data in script.",
    "text2": "The <span class=\"keyword apiname\">GlideExcelParser</span> methods can be used in global and scoped scripts. Use\n      the <span class=\"keyword parmname\">sn_impex</span> namespace identifier to create a GlideExcelParser\n      object.",
    "type": "Server Side Scoped",
    "variable": ""
  },
  {
    "children": [
      {
        "children": [
          {
            "children": null,
            "dc_identifier": null,
            "name": "Example",
            "order": 10,
            "release": "paris",
            "sectionHeader": null,
            "sectionTitle": null,
            "tableHeader": null,
            "text": "<code>var importSetTable = new sn_impex.GlideImportSetTable(\"temp user table\");</code>",
            "text2": null,
            "type": "Example",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "tableLabel",
            "order": 10,
            "release": "paris",
            "sectionHeader": "Parameters",
            "sectionTitle": null,
            "tableHeader": "Name,Type,Description",
            "text": "String",
            "text2": "Label of the Import Set table created upon calling the\n                  <span class=\"keyword apiname\">create()</span> method.",
            "type": "Parameter",
            "variable": null
          }
        ],
        "dc_identifier": "GImpSetTbl-GlideImportSetTable_S",
        "hasExample": true,
        "hasParameter": true,
        "name": "GlideImportSetTable(String tableLabel)",
        "order": 2130,
        "parentId": "GlideImportSetTableAPI",
        "parent_permalink": "class_namespace__scoped_glideimportsettable___scoped__global_sn_impex__paris",
        "release": "paris",
        "sectionHeader": null,
        "sectionTitle": null,
        "tableHeader": null,
        "text": "Instantiates a GlideImportSetTable object.",
        "text2": null,
        "type": "Constructor",
        "variable": null
      },
      {
        "children": [
          {
            "children": null,
            "dc_identifier": null,
            "name": "columnLabel",
            "order": 10,
            "release": "paris",
            "sectionHeader": "Parameters",
            "sectionTitle": null,
            "tableHeader": "Name,Type,Description",
            "text": "String",
            "text2": "Label of the GlideDateTime column to create in the Import Set table.",
            "type": "Parameter",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "void",
            "order": 10,
            "release": "paris",
            "sectionHeader": "Returns",
            "sectionTitle": null,
            "tableHeader": "Type,Description",
            "text": "Method does not return a value",
            "text2": null,
            "type": "Return",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "Example",
            "order": 10,
            "release": "paris",
            "sectionHeader": null,
            "sectionTitle": null,
            "tableHeader": null,
            "text": "<code>var importSetTable = new sn_impex.GlideImportSetTable(\"temp user table\");\nimportSetTable.addDateTimeColumn('start date');\nvar tableStructure = importSetTable.create();\n</code>",
            "text2": null,
            "type": "Example",
            "variable": null
          }
        ],
        "dc_identifier": "GImpSetTbl-addDateTimeColumn_S",
        "hasExample": true,
        "hasParameter": true,
        "hasReturn": true,
        "name": "addDateTimeColumn(String columnLabel)",
        "order": 2890,
        "parentId": "GlideImportSetTableAPI",
        "parent_permalink": "class_namespace__scoped_glideimportsettable___scoped__global_sn_impex__paris",
        "release": "paris",
        "sectionHeader": null,
        "sectionTitle": null,
        "tableHeader": null,
        "text": "Creates a GlideDateTime column.",
        "text2": null,
        "type": "Method",
        "variable": null
      },
      {
        "children": [
          {
            "children": null,
            "dc_identifier": null,
            "name": "void",
            "order": 10,
            "release": "paris",
            "sectionHeader": "Returns",
            "sectionTitle": null,
            "tableHeader": "Type,Description",
            "text": "Method does not return a value",
            "text2": null,
            "type": "Return",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "Example",
            "order": 10,
            "release": "paris",
            "sectionHeader": null,
            "sectionTitle": null,
            "tableHeader": null,
            "text": "<code>var importSetTable = new sn_impex.GlideImportSetTable(\"temp user table\");\nimportSetTable.addStringColumn('first name', 50);\nimportSetTable.addStringColumn('last name', 50);\nvar tableStructure = importSetTable.create();\n</code>",
            "text2": null,
            "type": "Example",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "columnLabel",
            "order": 10,
            "release": "paris",
            "sectionHeader": "Parameters",
            "sectionTitle": null,
            "tableHeader": "Name,Type,Description",
            "text": "String",
            "text2": "Label of the string column to create in the Import Set table.",
            "type": "Parameter",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "length",
            "order": 20,
            "release": "paris",
            "sectionHeader": "Parameters",
            "sectionTitle": null,
            "tableHeader": "Name,Type,Description",
            "text": "Number",
            "text2": "Optional. Maximum column length. <p class=\"p\">Default: 40 characters</p>",
            "type": "Parameter",
            "variable": null
          }
        ],
        "dc_identifier": "GImpSetTbl-addStringColumn_S_N",
        "hasExample": true,
        "hasParameter": true,
        "hasReturn": true,
        "name": "addStringColumn(String columnLabel, Number length)",
        "order": 3260,
        "parentId": "GlideImportSetTableAPI",
        "parent_permalink": "class_namespace__scoped_glideimportsettable___scoped__global_sn_impex__paris",
        "release": "paris",
        "sectionHeader": null,
        "sectionTitle": null,
        "tableHeader": null,
        "text": "Creates a string column.",
        "text2": null,
        "type": "Method",
        "variable": null
      },
      {
        "children": [
          {
            "children": null,
            "dc_identifier": null,
            "name": "Example",
            "order": 10,
            "release": "paris",
            "sectionHeader": null,
            "sectionTitle": null,
            "tableHeader": null,
            "text": "<code>// Create Import Set table\nvar importSetTable = new sn_impex.GlideImportSetTable(\"temp user table\");\nimportSetTable.addStringColumn('first name', 40);\nimportSetTable.addStringColumn('last name', 40);\nimportSetTable.addDateTimeColumn(‘start date’);\nvar tableStructure = importSetTable.create();\n\n/*\ntableStructure = {\n\"tableName\": \"imp_staging_table_1417601730000\",\n\"tableLabel\": “temp user table\",\n\"columns\": {\n\t\t\"first name\": \"u_first_name\",\n\t\t\"last name\": \"u_last_name\",\n\t\t\"start date\": \"u_start_date\"\n\t}\n}\n*/\n\nvar importSetTableName = tableStructure[\"tableName\"];\nvar columns = tableStructure[\"columns\"];\n</code>",
            "text2": null,
            "type": "Example",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "Object",
            "order": 10,
            "release": "paris",
            "sectionHeader": "Returns",
            "sectionTitle": null,
            "tableHeader": "Type,Description",
            "text": "JSON object in the following format:<div class=\"p\">\n                  <ul class=\"ul\" id=\"GImpSetTbl-create__ul_ebc_ft2_vjb\">\n                    <li class=\"li\">tableName: String. Database name of the table.</li>\n\n                    <li class=\"li\">tableLabel: String. User-friendly label of the table (rewriteable).</li>\n\n                    <li class=\"li\">columns: Object. Map of  table column labels to column names provided by the\n                        <span class=\"keyword apiname\">addDateTimeColumn()</span> and\n                        <span class=\"keyword apiname\">addStringColumn()</span> methods.<ul class=\"ul\" id=\"GImpSetTbl-create__ul_tgt_t52_vjb\">\n                        <li class=\"li\">column_label: String. Label of the string column in the Import Set\n                          table.</li>\n\n                        <li class=\"li\">column_name: String. Name of the string column in the Import Set\n                          table.</li>\n\n                      </ul>\n</li>\n\n                  </ul>\n\n                </div>\n<pre class=\"pre codeblock\"><code>{\"tableName\": \"&lt;table_name&gt;\", \"tableLabel\": \"&lt;table label&gt;\", \"columns\": StringMap(&lt;column_label&gt;: &lt;column_name&gt;)}</code></pre>",
            "text2": null,
            "type": "Return",
            "variable": null
          }
        ],
        "dc_identifier": "GImpSetTbl-create",
        "hasExample": true,
        "hasReturn": true,
        "name": "create()",
        "order": 4150,
        "parentId": "GlideImportSetTableAPI",
        "parent_permalink": "class_namespace__scoped_glideimportsettable___scoped__global_sn_impex__paris",
        "release": "paris",
        "sectionHeader": null,
        "sectionTitle": null,
        "tableHeader": null,
        "text": "Creates the Import Set table.",
        "text2": null,
        "type": "Method",
        "variable": null
      }
    ],
    "dc_identifier": "GlideImportSetTableAPI",
    "is_current": true,
    "is_highlighted": true,
    "level": "Class",
    "name": "GlideImportSetTable - Scoped, Global",
    "namespace_id": "sn_impex-namespace",
    "release": "paris",
    "text": "The <span class=\"keyword apiname\">GlideImportSetTable</span> API provides methods to create temporary\n    Import Set tables.",
    "text2": "These methods create the Import Set table using a dynamic, standard naming convention. Tables\n      must have at least one defined column. Modification and deletion of existing Import Set tables\n      is not supported.<br/><br/>A scheduled job named Scripted Import Set Deleter runs every seven days by default. Scripted\n      Import Set Deleter deletes all Import Sets, Transform Maps, Transform Entries, and drops the\n      Import Set Tables associated with the tables created by this\n      API.<br/><br/>You can use the <span class=\"keyword apiname\">GlideImportSetTable</span> methods in global and scoped scripts.\n      Use the <span class=\"keyword parmname\">sn_impex</span> namespace identifier to create a GlideImportSetTable\n      object.",
    "type": "Server Side Scoped",
    "variable": ""
  },
  {
    "children": [
      {
        "children": [
          {
            "children": null,
            "dc_identifier": null,
            "name": "Example",
            "order": 10,
            "release": "paris",
            "sectionHeader": null,
            "sectionTitle": null,
            "tableHeader": null,
            "text": "<code>var transformMap = new sn_impex.GlideImportSetTransformMap(\"temp user map name\", importSetTableName, targetTableName);</code>",
            "text2": null,
            "type": "Example",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "transformMapName",
            "order": 10,
            "release": "paris",
            "sectionHeader": "Parameters",
            "sectionTitle": null,
            "tableHeader": "Name,Type,Description",
            "text": "String",
            "text2": "Name of the map.",
            "type": "Parameter",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "importSetTableName",
            "order": 20,
            "release": "paris",
            "sectionHeader": "Parameters",
            "sectionTitle": null,
            "tableHeader": "Name,Type,Description",
            "text": "String",
            "text2": "Name of the Import Set table.",
            "type": "Parameter",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "targetTableName",
            "order": 30,
            "release": "paris",
            "sectionHeader": "Parameters",
            "sectionTitle": null,
            "tableHeader": "Name,Type,Description",
            "text": "String",
            "text2": "Name of the target table.",
            "type": "Parameter",
            "variable": null
          }
        ],
        "dc_identifier": "GImpSetTMp-GlImportSetTransformMap",
        "hasExample": true,
        "hasParameter": true,
        "name": "GlideImportSetTransformMap(String transformMapName, String importSetTableName, String targetTableName)",
        "order": 2150,
        "parentId": "GlideImportSetTransformMapAPI",
        "parent_permalink": "class_namespace__scoped_glideimportsettransformmap___scoped__global_sn_impex__paris",
        "release": "paris",
        "sectionHeader": null,
        "sectionTitle": null,
        "tableHeader": null,
        "text": "Instantiates a GlideImportSetTransformMap object.",
        "text2": null,
        "type": "Constructor",
        "variable": null
      },
      {
        "children": [
          {
            "children": null,
            "dc_identifier": null,
            "name": "Example",
            "order": 10,
            "release": "paris",
            "sectionHeader": null,
            "sectionTitle": null,
            "tableHeader": null,
            "text": "<code>var transformMap = new sn_impex.GlideImportSetTransformMap(\"temp user map name\", importSetTableName, targetTableName,);\ntransformMap.addDateTimeTransformEntry(\"u_start date\", \"first day\", true, \"yyyy-MM-dd HH:mm:ss\");\nvar transformMapId = transformMap.create();</code>",
            "text2": null,
            "type": "Example",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "targetColumn",
            "order": 10,
            "release": "paris",
            "sectionHeader": "Parameters",
            "sectionTitle": null,
            "tableHeader": "Name,Type,Description",
            "text": "String",
            "text2": "<span class=\"ph\">Target column from target table to transform\n                  to.</span>",
            "type": "Parameter",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "void",
            "order": 10,
            "release": "paris",
            "sectionHeader": "Returns",
            "sectionTitle": null,
            "tableHeader": "Type,Description",
            "text": "Method does not return a value",
            "text2": null,
            "type": "Return",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "coalesce",
            "order": 20,
            "release": "paris",
            "sectionHeader": "Parameters",
            "sectionTitle": null,
            "tableHeader": "Name,Type,Description",
            "text": "Boolean",
            "text2": "<div class=\"p\">Optional. Flag that indicates whether to insert the\n                  record into the target table<ul class=\"ul\" id=\"GImpSetTMp-addGDTTrnsEntry_S_S_B_S__d388e824\">\n                    <li class=\"li\">true: If true and target table contains a record with the same value in this\n                      field, the record is updated, that is, not inserted.</li>\n\n                    <li class=\"li\">false: Default. Record is inserted into the target table.</li>\n\n                  </ul>\n</div>",
            "type": "Parameter",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "sourceColumn",
            "order": 30,
            "release": "paris",
            "sectionHeader": "Parameters",
            "sectionTitle": null,
            "tableHeader": "Name,Type,Description",
            "text": "String",
            "text2": "<span class=\"ph\">Source column from Import Set table to\n                  transform from.</span>",
            "type": "Parameter",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "dateTimeFormat",
            "order": 40,
            "release": "paris",
            "sectionHeader": "Parameters",
            "sectionTitle": null,
            "tableHeader": "Name,Type,Description",
            "text": "String",
            "text2": "Optional. GlideDateTime format of the transform, for example, yyyy-MM-dd\n                HH:mm:ss. If empty, the default value is the system date time format.",
            "type": "Parameter",
            "variable": null
          }
        ],
        "dc_identifier": "GImpSetTMp-addGDTTrnsEntry_S_S_B_S",
        "hasExample": true,
        "hasParameter": true,
        "hasReturn": true,
        "name": "addDateTimeTransformEntry(String sourceColumn, String targetColumn, Boolean coalesce, String dateTimeFormat)",
        "order": 2900,
        "parentId": "GlideImportSetTransformMapAPI",
        "parent_permalink": "class_namespace__scoped_glideimportsettransformmap___scoped__global_sn_impex__paris",
        "release": "paris",
        "sectionHeader": null,
        "sectionTitle": null,
        "tableHeader": null,
        "text": "Add a GlideDateTime transform entry to a transform map.",
        "text2": null,
        "type": "Method",
        "variable": null
      },
      {
        "children": [
          {
            "children": null,
            "dc_identifier": null,
            "name": "void",
            "order": 10,
            "release": "paris",
            "sectionHeader": "Returns",
            "sectionTitle": null,
            "tableHeader": "Type,Description",
            "text": "Method does not return a value",
            "text2": null,
            "type": "Return",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "Example",
            "order": 10,
            "release": "paris",
            "sectionHeader": null,
            "sectionTitle": null,
            "tableHeader": null,
            "text": "<code>var transformMap = new sn_impex.GlideImportSetTransformMap(\"temp user map name\", importSetTableName, targetTableName); \ntransformMap.addTransformEntry(\"first_name\", \"first_name\", true);\ntransformMap.addTransformEntry(\"last_name\", \"last_name\", false);\ntransformMap.addTransformEntry(\"age\", \"age\", false); \nvar transformMapId = transformMap.create();\n</code>",
            "text2": null,
            "type": "Example",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "targetColumn",
            "order": 10,
            "release": "paris",
            "sectionHeader": "Parameters",
            "sectionTitle": null,
            "tableHeader": "Name,Type,Description",
            "text": "String",
            "text2": "<span class=\"ph\">Source column from Import Set table to\n                  transform from.</span>",
            "type": "Parameter",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "coalesce",
            "order": 20,
            "release": "paris",
            "sectionHeader": "Parameters",
            "sectionTitle": null,
            "tableHeader": "Name,Type,Description",
            "text": "String",
            "text2": "<span class=\"ph\">Target column from target table to transform\n                  to.</span>",
            "type": "Parameter",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "sourceColumn",
            "order": 30,
            "release": "paris",
            "sectionHeader": "Parameters",
            "sectionTitle": null,
            "tableHeader": "Name,Type,Description",
            "text": "Boolean",
            "text2": "<div class=\"p\">Optional. Flag that indicates whether to insert the\n                  record into the target table<ul class=\"ul\" id=\"GImpSetTMp-addTransformEntry_S_S_B__d388e824\">\n                    <li class=\"li\">true: If true and target table contains a record with the same value in this\n                      field, the record is updated, that is, not inserted.</li>\n\n                    <li class=\"li\">false: Default. Record is inserted into the target table.</li>\n\n                  </ul>\n</div>",
            "type": "Parameter",
            "variable": null
          }
        ],
        "dc_identifier": "GImpSetTMp-addTransformEntry_S_S_B",
        "hasExample": true,
        "hasParameter": true,
        "hasReturn": true,
        "name": "addTransformEntry(String sourceColumn, String targetColumn, Boolean coalesce)",
        "order": 3310,
        "parentId": "GlideImportSetTransformMapAPI",
        "parent_permalink": "class_namespace__scoped_glideimportsettransformmap___scoped__global_sn_impex__paris",
        "release": "paris",
        "sectionHeader": null,
        "sectionTitle": null,
        "tableHeader": null,
        "text": "Adds a string transform entry to a transform map.",
        "text2": null,
        "type": "Method",
        "variable": null
      },
      {
        "children": [
          {
            "children": null,
            "dc_identifier": null,
            "name": "String",
            "order": 10,
            "release": "paris",
            "sectionHeader": "Returns",
            "sectionTitle": null,
            "tableHeader": "Type,Description",
            "text": "The sys_id of the created transform map.",
            "text2": null,
            "type": "Return",
            "variable": null
          },
          {
            "children": null,
            "dc_identifier": null,
            "name": "Example",
            "order": 10,
            "release": "paris",
            "sectionHeader": null,
            "sectionTitle": null,
            "tableHeader": null,
            "text": "<code>var transformMap = new sn_impex.GlideImportSetTransformMap(\"temp user map name\", importSetTableName, targetTableName);\ntransformMap.addTransformEntry(\"u_first_name\", \"first_name\");\nvar transformMapId = transformMap.create();\n</code>",
            "text2": null,
            "type": "Example",
            "variable": null
          }
        ],
        "dc_identifier": "GImpSetTMp-create",
        "hasExample": true,
        "hasReturn": true,
        "name": "create()",
        "order": 4160,
        "parentId": "GlideImportSetTransformMapAPI",
        "parent_permalink": "class_namespace__scoped_glideimportsettransformmap___scoped__global_sn_impex__paris",
        "release": "paris",
        "sectionHeader": null,
        "sectionTitle": null,
        "tableHeader": null,
        "text": "Creates a new transform map.",
        "text2": "<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> To create a transform map you must have defined at least one transform entry using\n          either <span class=\"keyword apiname\">addDateTimeTransformEntry()</span>  or\n            <span class=\"keyword apiname\">addTransformEntry()</span>.</div></p>",
        "type": "Method",
        "variable": null
      }
    ],
    "dc_identifier": "GlideImportSetTransformMapAPI",
    "is_current": true,
    "is_highlighted": true,
    "level": "Class",
    "name": "GlideImportSetTransformMap - Scoped, Global",
    "namespace_id": "sn_impex-namespace",
    "release": "paris",
    "text": "Provides methods to create transform maps and transform entries.",
    "text2": "You can use the <span class=\"keyword apiname\">GlideImportSetTransformMap</span> methods in global and scoped\n      scripts. Use the <span class=\"keyword parmname\">sn_impex</span> namespace identifier to create a\n      GlideImportSetTransformMap object.",
    "type": "Server Side Scoped",
    "variable": ""
  }
]